//1268 Is It A Tree?
#define _FILE_DEBUG_
//#define _C_LAN_
//#define _DEBUG_OUTPUT_
#ifdef _FILE_DEBUG_
#include <fstream>
#endif
#include <iostream>
#include <stdio.h>
using namespace std;
#include <map>

int main(int argc, char *argv[])
{
#ifdef _FILE_DEBUG_
	ifstream fin;
	fin.open("../input.txt");
	cin.rdbuf(fin.rdbuf());
#ifdef _C_LAN_
	freopen("../input.txt", "r", stdin);
#endif
#endif
#ifdef _FILE_DEBUG_
	ofstream fout;
	fout.open("../output.txt");
	cout.rdbuf(fout.rdbuf());
#ifdef _C_LAN_
	freopen("../output.txt", "w", stdout);
#endif
#endif

	int case_num = 0, input[2], cnt, tmp;
	map<int, int> tree;
	bool is_not;
	while (cin >> input[0] >> input[1] && input[0] >= 0 && input[1] >= 0)
	{
		cout << "Case " << ++ case_num << " is ";
		tree.clear();
		is_not = false;
		while (input[0] > 0 && input[1] > 0)
		{
			if (is_not == true)
			{
				cin >> input[0] >> input[1];
				continue;
			}
			if (tree.find(input[0]) == tree.end())
			{
				tree.insert(pair<int, int> (input[0], -1));
			}
			if (tree.find(input[1]) == tree.end()
				|| tree.find(input[1])->second == -1)
			{
				tree[input[1]] = input[0];
			}
			else
			{
				is_not = true;
			}

			cin >> input[0] >> input[1];
		}
		if (is_not == false)
		{
			cnt = 0;
			for (map<int, int>::iterator it = tree.begin();
				it != tree.end(); ++ it)
			{
				if (it->second == -1)
				{
					++ cnt;
				}
			}
			if (tree.size() == 0 || cnt == 1)
			{
				cout << "a tree." << endl;
			}
			else
			{
				is_not = true;
			}
		}
		if (is_not == true)
		{
			cout << "not a tree." << endl;
		}
	}

	return 0;
}