//2110Tempter of the Bone
#define _FILE_DEBUG_
//#define _C_LAN_
//#define _DEBUG_OUTPUT_
#ifdef _FILE_DEBUG_
#include <fstream>
#endif
#include <iostream>
#include <stdio.h>
using namespace std;

#include <memory.h>
#include <stdlib.h>
#include <string>
#include <vector>
int size[2], time_sum, door[2];
const int MOVE[4][2] = {{0, -1}, {0, 1}, {-1, 0}, {1, 0}};
bool is_visited[10][10];
vector<string> map_vec;
bool Dfs(int now[2], int step)
{
	if (now[0] == door[0] && now[1] == door[1] && step == time_sum)
	{
		return true;
	}
	int dist_min = abs(now[0] - door[0]) + abs(now[1] - door[1]);
	if (step >= time_sum || dist_min > time_sum - step
		|| dist_min % 2 != (time_sum - step) % 2)
	{
		return false;
	}
	int next[2];
	for (int i = 0; i < 4; i ++)
	{
		for (int j = 0; j < 2; j ++)
		{
			next[j] = now[j] + MOVE[i][j];
		}
		if (next[0] >= 0 && next[0] < size[0] && next[1] >= 0 && next[1] < size[1]
			&& map_vec.at(next[0]).at(next[1]) != 'X'
			&& is_visited[next[0]][next[1]] == false)
		{
			is_visited[next[0]][next[1]] = true;
			if (Dfs(next, step + 1) == true)
			{
				return true;
			}
			is_visited[next[0]][next[1]] = false;
		}
	}
	return false;
}
int main()
{
#ifdef _FILE_DEBUG_
	ifstream fin;
	fin.open("../input.txt");
	cin.rdbuf(fin.rdbuf()); // assign file's streambuf to cin
#ifdef _C_LAN_
	freopen("../input.txt", "r", stdin);
#endif
#endif
#ifdef _FILE_DEBUG_
	ofstream fout;
	fout.open("../output.txt");
	cout.rdbuf(fout.rdbuf()); // assign file's streambuf to cout
#ifdef _C_LAN_
	freopen("../output.txt", "w", stdout);
#endif
#endif

	string str_tmp;
	int begin[2], x_cnt;
	while (cin >> size[0] >> size[1] >> time_sum && (size[0] || size[1] || time_sum)) 
	{
		x_cnt = 0;
		map_vec.clear();
		memset(is_visited, 0x0, sizeof(is_visited));
		for (int i = 0; i < size[0]; i ++)
		{
			cin >> str_tmp;
			map_vec.push_back(str_tmp);
			for (int j = 0; j < str_tmp.size(); j ++)
			{
				if (str_tmp.at(j) == 'S')
				{
					begin[0] = i;
					begin[1] = j;
				}
				else if (str_tmp.at(j) == 'D')
				{
					door[0] = i;
					door[1] = j;
				}
				else if (str_tmp.at(j) == 'X')
				{
					x_cnt ++;
				}
			}
		}
		is_visited[begin[0]][begin[1]] = true;
		if (size[0] * size[1] - x_cnt >= time_sum && Dfs(begin, 0) == true)
		{
			cout << "YES" << endl;
		}
		else
		{
			cout << "NO" << endl;
		}
	}
	return 0;
}