//1221Risk
#define _FILE_DEBUG_
//#define _C_LAN_
//#define _DEBUG_OUTPUT_
#ifdef _FILE_DEBUG_
#include <fstream>
#endif
#include <iostream>
#include <stdio.h>
using namespace std;

#define COUN_MAX 22
#include <memory.h>
#include <limits.h>
#include <queue>

bool map[COUN_MAX][COUN_MAX], is_used[COUN_MAX];
int map_cnt[COUN_MAX], calc[100][2], dist[COUN_MAX];
queue<int> coun_q;
void Bfs(int start, int end)
{
	is_used[start] = true;
	//cout << start + 1 << " ";
	//if (start + 1 == 19)
	//	cout << "here";
	int min_dist = INT_MAX, min_num = INT_MAX;
	for (int i = 0; i < 20; i ++)
	{
		if (i == start || map[start][i] == false || is_used[i] == true)
			continue;
		if (dist[i] > dist[start] + 1)
		{
			dist[i] = dist[start] + 1;
			if (i != end)
				coun_q.push(i);
		}
	}
}
int main()
{
#ifdef _FILE_DEBUG_
	ifstream fin;
	fin.open("../input.txt");
	cin.rdbuf(fin.rdbuf()); // assign file's streambuf to cin
#ifdef _C_LAN_
	freopen("../input.txt", "r", stdin);
#endif
#endif
#ifdef _FILE_DEBUG_
	ofstream fout;
	fout.open("../output.txt");
	cout.rdbuf(fout.rdbuf()); // assign file's streambuf to cout
#ifdef _C_LAN_
	freopen("../output.txt", "w", stdout);
#endif
#endif

	bool is_end = false;
	int case_num = 0, map_tmp, calc_sum;
	while (true)
	{
		case_num ++;
		memset(map, 0x0, sizeof(map));
		for (int i = 0; i < 19; i ++)
		{
			cin >> map_cnt[i];
			for (int j = 0; j < map_cnt[i]; j ++)
			{
				if ((cin >> map_tmp) == false)
				{
					is_end = true;
					break;
				}
				map[i][map_tmp - 1] = map[map_tmp - 1][i] = true;
			}
			if (is_end == true)
				break;
		}
		if (is_end == true)
			break;
		//else if (case_num > 1)
		//	cout << endl;
		cout << "Test Set #" << case_num << endl;
		cin >> calc_sum;
		for (int i = 0; i < calc_sum; i ++)
		{
			cin >> calc[i][0] >> calc[i][1];
			calc[i][0] --;
			calc[i][1] --;
			memset(is_used, 0x0, sizeof(is_used));
			for (int j = 0; j < 20; j ++)
			{
				dist[j] = INT_MAX;
			}
			dist[calc[i][0]] = 0;
			while (coun_q.empty() == false)
				coun_q.pop();
			coun_q.push(calc[i][0]);
			while (coun_q.empty() == false)
			{
				Bfs(coun_q.front(), calc[i][1]);
				coun_q.pop();
			}
			cout << calc[i][0] + 1 << " to " << calc[i][1] + 1 << ": "
				<< dist[calc[i][1]] << endl;
		}
		cout << endl;
	}
	return 0;
}