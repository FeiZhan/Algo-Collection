//1027Human Gene Functions
#define _FILE_DEBUG_
//#define _C_LAN_
//#define _DEBUG_OUTPUT_
#ifdef _FILE_DEBUG_
#include <fstream>
#endif
#include <iostream>
#include <stdio.h>
using namespace std;

#include <string>
int dp[110][110];
const int matrix[5][5] = {{5, -1, -2, -1, -3},
	{ -1, 5, -3, -2, -4},
	{ -2, -3, 5, -2, -2},
	{ -1, -2, -2, 5, -1},
	{ -3, -4, -2, -1, 0}};
int Score(const char c1, const char c2)
{
	//switch (c1)
	//{
	//case 'A':
	//	switch (c2)
	//	{
	//	case 'A':
	//		return 5;
	//		break;
	//	case 'C':
	//		return -1;
	//		break;
	//	case 'G':
	//		return -2;
	//		break;
	//	case 'T':
	//		return -1;
	//	case '-':
	//		return -3;
	//	}
	//	break;
	//case 'C':
	//	switch (c2)
	//	{
	//	case 'C':
	//		return 5;
	//	case 'G':
	//		return -3;
	//	case 'T':
	//		return -2;
	//	case '-':
	//		return -4;
	//	}
	//	break;
	//case 'G':
	//	switch (c2)
	//	{
	//	case 'G':
	//		return 5;
	//	case 'T':
	//		return -2;
	//	case '-':
	//		return -2;
	//	}
	//	break;
	//case 'T':
	//	switch (c2)
	//	{
	//	case 'T':
	//		return 5;
	//	case '-':
	//		return -1;
	//	}
	//	break;
	//}
	int num[2];
	switch (c1)
	{
	case 'A':
		num[0] = 0;
		break;
	case 'C':
		num[0] = 1;
		break;
	case 'G':
		num[0] = 2;
		break;
	case 'T':
		num[0] = 3;
		break;
	case '-':
		num[0] = 4;
		break;
	}
	switch (c2)
	{
	case 'A':
		num[1] = 0;
		break;
	case 'C':
		num[1] = 1;
		break;
	case 'G':
		num[1] = 2;
		break;
	case 'T':
		num[1] = 3;
		break;
	case '-':
		num[1] = 4;
		break;
	}
	return matrix[num[0]][num[1]];
}

int main(int argc, char *argv[])
{
#ifdef _FILE_DEBUG_
	ifstream fin;
	fin.open("../input.txt");
	cin.rdbuf(fin.rdbuf()); // assign file's streambuf to cin
#ifdef _C_LAN_
	freopen("../input.txt", "r", stdin);
#endif
#endif
#ifdef _FILE_DEBUG_
	ofstream fout;
	fout.open("../output.txt");
	cout.rdbuf(fout.rdbuf()); // assign file's streambuf to cout
#ifdef _C_LAN_
	freopen("../output.txt", "w", stdout);
#endif
#endif

	int case_sum, gene_len;
	string gene[2];
	cin >> case_sum;
	while (case_sum --)
	{
		cin >> gene_len >> gene[0] >> gene_len >> gene[1];
		for (int i = 0; i <= gene[0].size(); ++ i)
		{
			for (int j = 0; j <= gene[1].size(); ++ j)
			{
				if (i == 0 && j == 0)
					dp[i][j] = 0;
				else if (i == 0)
				{
					dp[i][j] = Score('-', gene[1].at(j - 1)) + dp[i][j - 1];
				}
				else if (j == 0)
				{
					dp[i][j] = Score(gene[0].at(i - 1), '-') + dp[i - 1][j];
				}
				else
				{
					dp[i][j] = max<int>(
						Score(gene[0].at(i - 1), gene[1].at(j - 1)) + dp[i - 1][j - 1]
						, max<int>(Score(gene[0].at(i - 1), '-') + dp[i - 1][j]
						, Score('-', gene[1].at(j - 1)) + dp[i][j - 1]));
				}
			}
		}
		cout << dp[gene[0].size()][gene[1].size()] << endl;
	}

	return 0;
}