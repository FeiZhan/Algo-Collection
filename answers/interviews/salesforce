import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {
    
/*
 * Complete the function below.
 */

    static void doIt(String[] input) {
        if (input == null || input.length == 0) {
            return;
        }

        List<String> installed = new LinkedList<>();
        Map<String, Integer> counts = new HashMap<>();
        Map<String, Set<String>> dependency = new HashMap<>();
        Set<String> explicit = new HashSet<>();
        for (int i = 0; i < input.length; i++) {
            String[] command = input[i].trim().split("\\s+");
            System.out.println(String.join(" ", command));
            switch (command[0]) {
                case "DEPEND":
                    Set<String> depSet = dependency.getOrDefault(command[1], new HashSet<>());
                    for (int j = 2; j < command.length; j++) {
                        if (!hasDependency(command[j], command[1], dependency)) {
                            depSet.add(command[j]);
                        } else {
                            System.out.println(command[j] + " depends on " + command[1] + ", ignoring command");
                        }
                    }
                    dependency.put(command[1], depSet);
                    break;
                case "INSTALL":
                    if (installed.contains(command[1])) {
                        System.out.println(command[1] + " is already installed");
                    } else {
                        explicit.add(command[1]);
                        install(command[1], installed, counts, dependency);
                    }
                    break;
                case "REMOVE":
                    if (!installed.contains(command[1])) {
                        System.out.println(command[1] + " is not installed");
                    } else {
                        if (explicit.contains(command[1]) && counts.getOrDefault(command[1], 0) == 1) {
                            counts.put(command[1], 0);
                            explicit.remove(command[1]);
                        }
                        if (counts.getOrDefault(command[1], 0) < 1) {
                            remove(command[1], installed, counts, dependency, explicit);
                        } else {
                            System.out.println(command[1] + " is still needed");
                        }
                    }
                    break;
                case "LIST":
                    for (String component : installed) {
                        System.out.println(component);
                    }
                    break;
                case "END":
                    break;
                default:
            }
        }
    }
    
    public static void main(String[] args){
        Scanner in = new Scanner(System.in);
        
        int _input_size = 0;
        _input_size = Integer.parseInt(in.nextLine().trim());
        String[] _input = new String[_input_size];
        String _input_item;
        for(int _input_i = 0; _input_i < _input_size; _input_i++) {
            try {
                _input_item = in.nextLine();
            } catch (Exception e) {
                _input_item = null;
            }
            _input[_input_i] = _input_item;
        }
        
        doIt(_input);
        
    }

    private static boolean hasDependency(String component, String target, Map<String, Set<String>> dependency) {
        if (!dependency.containsKey(component)) {
            return false;
        }
        Set<String> depSet = dependency.get(component);
        if (depSet.contains(target)) {
            return true;
        }
        for (String dep : depSet) {
            if (hasDependency(dep, target, dependency)) {
                return true;
            }
        }
        return false;
    }

    private static void install(String component, List<String> installed, Map<String, Integer> counts, Map<String, Set<String>> dependency) {
        if (dependency.containsKey(component)) {
            Set<String> depSet = dependency.get(component);
            for (String dep : depSet) {
                install(dep, installed, counts, dependency);
            }
        }
        counts.put(component, counts.getOrDefault(component, 0) + 1);
        //System.out.println("Count " + component + " " + counts.get(component));
        if (!installed.contains(component)) {
            installed.add(component);
            System.out.println("Installing " + component);
        }
    }

    private static void remove(String component, List<String> installed, Map<String, Integer> counts, Map<String, Set<String>> dependency, Set<String> explicit) {
        counts.put(component, counts.getOrDefault(component, 0) - 1);
        //System.out.println("Count " + component + " " + counts.get(component));
        if (explicit.contains(component)) {
            return;
        }
        if (installed.contains(component) && counts.getOrDefault(component, 0) < 1) {
            installed.remove(component);
            counts.remove(component);
            System.out.println("Removing " + component);
        }
        if (dependency.containsKey(component)) {
            Set<String> depSet = dependency.get(component);
            for (String dep : depSet) {
                remove(dep, installed, counts, dependency, explicit);
            }
        }
    }
}
