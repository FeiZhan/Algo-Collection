//1103 Hike on a Graph
#define _FILE_DEBUG_
//#define _C_LAN_
//#define _DEBUG_OUTPUT_
#ifdef _FILE_DEBUG_
#include <fstream>
#endif
#include <iostream>
#include <stdio.h>
using namespace std;

#include <queue>
#include <memory.h>
#define MAX_NUM 60
struct node
{
	int piece[3];
	int time;
} now, next;

int main(int argc, char *argv[])
{
#ifdef _FILE_DEBUG_
	ifstream fin;
	fin.open("../input.txt");
	cin.rdbuf(fin.rdbuf());
#ifdef _C_LAN_
	freopen("../input.txt", "r", stdin);
#endif
#endif
#ifdef _FILE_DEBUG_
	ofstream fout;
	fout.open("../output.txt");
	cout.rdbuf(fout.rdbuf());
#ifdef _C_LAN_
	freopen("../output.txt", "w", stdout);
#endif
#endif

	bool mark[MAX_NUM][MAX_NUM][MAX_NUM];
	int graph_size, min_move, tmp;
	char map[MAX_NUM][MAX_NUM];
	while (cin >> graph_size && graph_size > 0)
	{
		for (int i = 0; i < 3; ++ i)
		{
			cin >> tmp;
			now.piece[i] = tmp - 1;
		}
		for (int i = 0; i < graph_size; ++ i)
		{
			for (int j = 0; j < graph_size; ++ j)
			{
				cin >> map[i][j];
			}
		}
		// bfs
		queue<node> node_que;
		memset(mark, 0, sizeof(mark));
		now.time = 0;
		mark[now.piece[0]][now.piece[1]][now.piece[2]] = true;
		min_move = -1;
		if (now.piece[0] == now.piece[1] && now.piece[0] == now.piece[2])
		{
			min_move = 0;
		}
		node_que.push(now);
		while (! node_que.empty() && min_move == -1)
		{
			now = node_que.front();
			node_que.pop();
			for (int i = 0; i < graph_size; ++ i)
			{
				if (map[now.piece[0]][i] == map[now.piece[1]][now.piece[2]]
					&& ! mark[i][now.piece[1]][now.piece[2]])
				{
					mark[i][now.piece[1]][now.piece[2]] = true;
					next.time = now.time + 1;
					next.piece[0] = i;
					next.piece[1] = now.piece[1];
					next.piece[2] = now.piece[2];
					if (next.piece[0] == next.piece[1]
						&& next.piece[0] == next.piece[2])
					{
						min_move = next.time;
						break;
					}
					node_que.push(next);
				}
				if (map[now.piece[1]][i] == map[now.piece[0]][now.piece[2]]
					&& ! mark[now.piece[0]][i][now.piece[2]])
				{
					mark[now.piece[0]][i][now.piece[2]] = true;
					next.time = now.time + 1;
					next.piece[0] = now.piece[0];
					next.piece[1] = i;
					next.piece[2] = now.piece[2];
					if (next.piece[0] == next.piece[1]
						&& next.piece[0] == next.piece[2])
					{
						min_move = next.time;
						break;
					}
					node_que.push(next);
				}
				if (map[now.piece[2]][i] == map[now.piece[1]][now.piece[0]]
					&& ! mark[now.piece[0]][now.piece[1]][i])
				{
					mark[now.piece[0]][now.piece[1]][i] = true;
					next.time = now.time + 1;
					next.piece[0] = now.piece[0];
					next.piece[1] = now.piece[1];
					next.piece[2] = i;
					if (next.piece[0] == next.piece[1]
						&& next.piece[0] == next.piece[2])
					{
						min_move = next.time;
						break;
					}
					node_que.push(next);
				}
			}
		}
		if (min_move == -1)
		{
			cout << "impossible" << endl;
		}
		else
		{
			cout << min_move << endl;
		}
	}

	return 0;
}