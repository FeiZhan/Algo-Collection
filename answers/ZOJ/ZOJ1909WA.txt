//1909Square
#define _FILE_DEBUG_
//#define _C_LAN_
//#define _DEBUG_OUTPUT_
#ifdef _FILE_DEBUG_
#include <fstream>
#endif
#include <iostream>
#include <stdio.h>
using namespace std;
#include <algorithm>

int stick_sum, stick[22], squ_len;
bool is_used[22];
bool cmp(int a, int b)
{
    return a > b;
}
bool Dfs(int now_len, int current)
{
	if (now_len == squ_len)
		return true;
	int last_check = -1;
	if (current < 0)
		current = 0;
	for (int i = current; i < stick_sum; i ++)
	{
		if (is_used[i] == true || stick[i] > squ_len - now_len
			|| stick[i] == last_check)
			continue;
		is_used[i] = true;
		if (Dfs(now_len + stick[i], i) == true)
			return true;
		last_check = stick[i];
		is_used[i] = false;
	}
	return false;
}
int main()
{
#ifdef _FILE_DEBUG_
	ifstream fin;
	fin.open("../input.txt");
	cin.rdbuf(fin.rdbuf()); // assign file's streambuf to cin
#ifdef _C_LAN_
	freopen("../input.txt", "r", stdin);
#endif
#endif
#ifdef _FILE_DEBUG_
	ofstream fout;
	fout.open("../output.txt");
	cout.rdbuf(fout.rdbuf()); // assign file's streambuf to cout
#ifdef _C_LAN_
	freopen("../output.txt", "w", stdout);
#endif
#endif

	bool form_flag;
	int case_sum, sum, current;
	cin >> case_sum;
	while (case_sum --)
	{
		cin >> stick_sum;
		sum = 0;
		for (int i = 0; i < stick_sum; i ++)
		{
			cin >> stick[i];
			sum += stick[i];
			is_used[i] = false;
		}
		if (stick_sum < 4 || sum % 4 != 0)
		{
			cout << "no" << endl;
			continue;
		}
		else
		{
			squ_len = sum / 4;
			sort(stick, stick + stick_sum, cmp);
			form_flag = true;
			current = -1;
			for (int i = 0; i < 4; i ++)
			{
				if (Dfs(0, current) == false)
				{
					cout << "no" << endl;
					form_flag = false;
					break;
				}
			}
			if (form_flag == true)
			{
				for (int i = 0; i < stick_sum; i ++)
				{
					if (is_used[i] == false)
					{
						form_flag = false;
						break;
					}
				}
				if (form_flag == true)
					cout << "yes" << endl;
				else
					cout << "no" << endl;
			}
		}
	}
	return 0;
}




//1909Square
#define _FILE_DEBUG_
//#define _C_LAN_
//#define _DEBUG_OUTPUT_
#ifdef _FILE_DEBUG_
#include <fstream>
#endif
#include <iostream>
#include <stdio.h>
using namespace std;

#include <stdlib.h>
#include <memory.h>
#define MAX_NUM 30
int fcmp(const void *p1,const void *p2)
{
	return *((int *)p2) > *((int *)p1) ? 1 : -1;
}
int stick_sum, stick[MAX_NUM], len_sum;
bool is_used[MAX_NUM];
bool Dfs(int len_now, bool is_visited[MAX_NUM], int now)
{
	int last = -1;
	for (int i = 0; i < stick_sum; i ++)
	{
		if (stick[i] > len_sum / 4)
		{
			return false;
		}
		if (is_visited[i] == true || stick[i] > len_sum / 4 - len_now
			|| stick[i] == last)
		{
			continue;
		}
		is_visited[i] = true;
		if (len_now + stick[i] == len_sum / 4
			|| Dfs(len_now + stick[i], is_visited, i + 1))
		{
			for (int i = 0; i < stick_sum; i ++)
			{
				if (is_visited[i])
				{
					is_used[i] = true;
				}
			}
			return true;
		}
		is_visited[i] = false;
		last = stick[i];
		if (len_now == 0)
		{
			return false;
		}
	}
	return false;
}
int main(int argc, char *argv[])
{
#ifdef _FILE_DEBUG_
	ifstream fin;
	fin.open("../input.txt");
	cin.rdbuf(fin.rdbuf()); // assign file's streambuf to cin
#ifdef _C_LAN_
	freopen("../input.txt", "r", stdin);
#endif
#endif
#ifdef _FILE_DEBUG_
	ofstream fout;
	fout.open("../output.txt");
	cout.rdbuf(fout.rdbuf()); // assign file's streambuf to cout
#ifdef _C_LAN_
	freopen("../output.txt", "w", stdout);
#endif
#endif

	int case_sum;
	bool is_visited[MAX_NUM], if_find;
	cin >> case_sum;
	while (case_sum --)
	{
		cin >> stick_sum;
		len_sum = 0;
		for (int i = 0; i < stick_sum; i ++)
		{
			cin >> stick[i];
			len_sum += stick[i];
		}
		if (len_sum % 4 != 0)
		{
			cout << "no" << endl;
			continue;
		}
		qsort(stick, stick_sum, sizeof(int), fcmp);
		if (stick[0] > len_sum / 4)
		{
			cout << "no" << endl;
			continue;
		}
		memset(is_visited, 0, sizeof(is_visited));
		memset(is_used, 0, sizeof(is_used));
		if_find = true;
		for (int i = 0; i < 3; i ++)
		{
			for (int j = 0; j < stick_sum; j ++)
			{
				is_visited[j] = is_used[j];
			}
			if (! Dfs(0, is_visited, 0))
			{
				if_find = false;
				break;
			}
		}
		if (if_find == true)
			cout << "yes" << endl;
		else
			cout << "no" << endl;
	}

	return 0;
}