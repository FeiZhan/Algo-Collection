//1146LC-Display
#define _FILE_DEBUG_
//#define _C_LAN_
//#define _DEBUG_OUTPUT_
#ifdef _FILE_DEBUG_
#include <fstream>
#endif
#include <iostream>
#include <stdio.h>
using namespace std;
#include <string>
int main()
{
#ifdef _FILE_DEBUG_
	ifstream fin;
	fin.open("../input.txt");
	cin.rdbuf(fin.rdbuf()); // assign file's streambuf to cin
#ifdef _C_LAN_
	freopen("../input.txt", "r", stdin);
#endif
#endif
#ifdef _FILE_DEBUG_
	ofstream fout;
	fout.open("../output.txt");
	cout.rdbuf(fout.rdbuf()); // assign file's streambuf to cout
#ifdef _C_LAN_
	freopen("../output.txt", "w", stdout);
#endif
#endif

	bool stroke[10][7] = {{true, true, true, false, true, true, true}
						, {false, false, true, false, false, true, false}
						, {true, false, true, true, true, false, true}
						, {true, false, true, true, false, true, true}
						, {false, true, true, true, false, true, false}
						, {true, true, false, true, false, true, true}
						, {true, true, false, true, true, true, true}
						, {true, false, true, false, false, true, false}
						, {true, true, true, true, true, true, true}
						, {true, true, true, true, false, true, true}};
	bool is_first = true;
	int digit_size;
	string num, disp[100];
	while (cin >> digit_size >> num && digit_size > 0)
	{
		for (int i = 0; i < 20; i ++)
		{
			disp[i].clear();
		}
		for (int i = 0; i < num.size(); i ++)
		{
			if (stroke[num.at(i) - '0'][0] == true)
			{
				disp[0].append(" ");
				for (int j = 1; j <= digit_size; j ++)
				{
					disp[0].append("-");
				}
				disp[0].append(" ");
			}
			else
			{
				for (int j = 0; j <= digit_size + 1; j ++)
				{
					disp[0].append(" ");
				}
			}
			if (stroke[num.at(i) - '0'][1] == true)
			{
				for (int j = 1; j < digit_size + 1; j ++)
				{
					disp[j].append("|");
				}
			}
			else
			{
				for (int j = 1; j < digit_size + 1; j ++)
				{
					disp[j].append(" ");
				}
			}
			if (stroke[num.at(i) - '0'][2] == true)
			{
				for (int j = 1; j < digit_size + 1; j ++)
				{
					for (int k = 0; k < digit_size; k ++)
					{
						disp[j].append(" ");
					}
					disp[j].append("|");
				}
			}
			else if (i == num.size() - 1)
			{
				for (int j = 1; j < digit_size + 1; j ++)
				{
					for (int k = 0; k <= digit_size - 0; k ++)
					{
						disp[j].append(" ");
					}
				}
			}
			else
			{
				for (int j = 1; j < digit_size + 1; j ++)
				{
					for (int k = 0; k <= digit_size; k ++)
					{
						disp[j].append(" ");
					}
				}
			}
			if (stroke[num.at(i) - '0'][3] == true)
			{
				disp[digit_size + 1].append(" ");
				for (int j = 1; j <= digit_size; j ++)
				{
					disp[digit_size + 1].append("-");
				}
				disp[digit_size + 1].append(" ");
			}
			else
			{
				for (int j = 0; j <= digit_size + 1; j ++)
				{
					disp[digit_size + 1].append(" ");
				}
			}
			if (stroke[num.at(i) - '0'][4] == true)
			{
				for (int j = digit_size + 2; j < 2 * digit_size + 2; j ++)
				{
					disp[j].append("|");
				}
			}
			else
			{
				for (int j = digit_size + 2; j < 2 * digit_size + 2; j ++)
				{
					disp[j].append(" ");
				}
			}
			if (stroke[num.at(i) - '0'][5] == true)
			{
				for (int j = digit_size + 2; j < 2 * digit_size + 2; j ++)
				{
					for (int k = 0; k < digit_size; k ++)
					{
						disp[j].append(" ");
					}
					disp[j].append("|");
				}
			}
			else if (i == num.size() - 1)
			{
				for (int j = digit_size + 2; j < 2 * digit_size + 2; j ++)
				{
					for (int k = 0; k <= digit_size - 0; k ++)
						disp[j].append(" ");
				}
			}
			else
			{
				for (int j = digit_size + 2; j < 2 * digit_size + 2; j ++)
				{
					for (int k = 0; k <= digit_size; k ++)
						disp[j].append(" ");
				}
			}
			if (stroke[num.at(i) - '0'][6] == true)
			{
				disp[2 * digit_size + 2].append(" ");
				for (int j = 1; j <= digit_size; j ++)
				{
					disp[2 * digit_size + 2].append("-");
				}
				disp[2 * digit_size + 2].append(" ");
			}
			else
			{
				for (int j = 0; j <= digit_size + 1; j ++)
				{
					disp[2 * digit_size + 2].append(" ");
				}
			}
			if (i < num.size() - 1)
			{
				for (int j = 0; j <= 2 * digit_size + 2; j ++)
				{
					disp[j].append(" ");
				}
			}
		}
		for (int i = 0; i <= 2 * digit_size + 2; i ++)
		{
			cout << disp[i] << endl;
		}
		cout << endl;
	}

	return 0;
}