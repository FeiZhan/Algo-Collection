//2008Invitation Cards
#define _FILE_DEBUG_
//#define _C_LAN_
//#define _DEBUG_OUTPUT_
#ifdef _FILE_DEBUG_
#include <fstream>
#endif
#include <iostream>
#include <stdio.h>
using namespace std;

#include <memory.h>
#include <queue>
#define MAXN 1000010
struct Line
{
	int begin, end, price;
} line[MAXN];
int head[MAXN], HeadNum;
bool flag[MAXN];
queue<int> que;
long long dist[MAXN];
struct Edge
{
	int begin, next;
	long long price;
	Edge()
	{}
	Edge(int l_begin, long long l_price, int l_next)
		: begin(l_begin), price(l_price), next(l_next)
	{}
} edge[MAXN];
inline void AddEdge(int begin, int end, long long price)
{
	edge[HeadNum] = Edge(end, price, head[begin]);
	head[begin] = HeadNum ++;
}
long long SPFA(int stop_sum)
{
	int now, next;
	memset(flag, false, sizeof(flag));
	memset(dist, 0x7f, sizeof(dist));
	dist[1] = 0;
	flag[1] = true;
	que.push(1);
	while (! que.empty())
	{
		now = que.front();
		que.pop();
		flag[now] = false;
		for (int i = head[now]; i != -1; i = edge[i].next)
		{
			next = edge[i].begin;
			if (dist[next] > dist[now] + edge[i].price)
			{
				dist[next] = dist[now] + edge[i].price;
				if (!flag[next])
				{
					que.push(next);
					flag[next] = true;
				}
			}
		}
	}
	long long ans = 0;
	for (int i = 1; i <= stop_sum; i ++)
		ans += dist[i];
	return ans;
}
int main(int argc, char *argv[])
{
#ifdef _FILE_DEBUG_
	ifstream fin;
	fin.open("../input.txt");
	cin.rdbuf(fin.rdbuf()); // assign file's streambuf to cin
#ifdef _C_LAN_
	freopen("../input.txt", "r", stdin);
#endif
#endif
#ifdef _FILE_DEBUG_
	ofstream fout;
	fout.open("../output.txt");
	cout.rdbuf(fout.rdbuf()); // assign file's streambuf to cout
#ifdef _C_LAN_
	freopen("../output.txt", "w", stdout);
#endif
#endif

	int case_sum, begin, end, price;
	int stop_sum, line_sum;
	long long ans;
	while (cin >> case_sum)
	{
		while (case_sum --)
		{
			cin >> stop_sum >> line_sum;
			HeadNum = 0;
			memset(head, -1, sizeof(head));
			for (int i = 0; i < line_sum; i ++)
			{
				cin >> begin >> end >> price;
				line[i].begin = begin;
				line[i].end = end;
				line[i].price = price;
				AddEdge(begin, end, price);
			}
			ans = SPFA(stop_sum);
			HeadNum = 0;
			memset(head, -1, sizeof(head));
			for (int i = 0; i < line_sum; i ++)
			{
				AddEdge(line[i].end, line[i].begin, line[i].price);
			}
			cout << ans + SPFA(stop_sum) << endl;
		}
	}

	return 0;
}