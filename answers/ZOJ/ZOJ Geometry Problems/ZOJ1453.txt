//1453Surround the Trees
#define _FILE_DEBUG_
//#define _C_LAN_
//#define _DEBUG_OUTPUT_
#ifdef _FILE_DEBUG_
#include <fstream>
#endif
#include <iostream>
#include <stdio.h>
using namespace std;

#include <algorithm>
#include <math.h>
#include <iomanip>
#define MAX_NUM 120

typedef struct
{
	double x, y;
} SPoint;
SPoint p[MAX_NUM];
double CrossProduct(SPoint a, SPoint b, SPoint c)	//向量 ac 在 ab 的方向
{
	return (c.x - a.x) * (b.y - a.y) - (b.x - a.x) * (c.y - a.y);
}
bool cmp(SPoint a, SPoint b)
{
	if (a.y == b.y)
		return a.x < b.x;
	else
		return a.y < b.y;
}
bool cmp1(SPoint a, SPoint b)
{
	return CrossProduct(p[0], a, b) < 0 ? true : false;
}
double Dist(SPoint a, SPoint b)
{
	return sqrt(( a.x - b.x ) * ( a.x - b.x ) + ( a.y - b.y ) * ( a.y - b.y ));
}
SPoint stk[MAX_NUM];
int top;
double DistSum()
{
	double sum = 0.0;
	for (int i = 0; i < top; i ++)
	{
		sum += Dist(stk[i], stk[i + 1]);
	}
	sum += Dist(stk[top], stk[0]);
	return sum;
}
double Graham(int n)
{
	sort(p, p + n, cmp);
	sort(p + 1, p + n, cmp1);
	top = 0;
	for (int i = 0; i < 3; i ++)
	{
		stk[top ++] = p[i];
	}
	top --;
	for (int i = 3; i < n; i ++)
	{
		while (1)
		{
			if (CrossProduct(stk[top], stk[top - 1], p[i]) < 0)
				top --;
			else
				break;
		}
		stk[++ top] = p[i];
	}
	return DistSum();
}
int main()
{
#ifdef _FILE_DEBUG_
	ifstream fin;
	fin.open("../input.txt");
	cin.rdbuf(fin.rdbuf()); // assign file's streambuf to cin
#ifdef _C_LAN_
	freopen("../input.txt", "r", stdin);
#endif
#endif
#ifdef _FILE_DEBUG_
	ofstream fout;
	fout.open("../output.txt");
	cout.rdbuf(fout.rdbuf()); // assign file's streambuf to cout
#ifdef _C_LAN_
	freopen("../output.txt", "w", stdout);
#endif
#endif

	int tree_sum;
	while (cin >> tree_sum && tree_sum > 0)
	{
		for (int i = 0; i < tree_sum; i ++)
		{
			cin >> p[i].x >> p[i].y;
		}
		if (tree_sum == 1)
		{
			cout << "0.00" << endl;
			continue;
		}
		else if (tree_sum == 2)
		{
			cout << setiosflags(ios::fixed) << setprecision(2)
				<< 2 * Dist(p[0], p[1]) << endl;
			continue;
		}
		cout << setiosflags(ios::fixed) << setprecision(2)
			<< Graham(tree_sum) << endl;
	}
	return 0;
}