//1136Multiple
#define _FILE_DEBUG_
//#define _C_LAN_
//#define _DEBUG_OUTPUT_
#ifdef _FILE_DEBUG_
#include <fstream>
#endif
#include <iostream>
#include <stdio.h>
using namespace std;

#include <string>
#include <queue>
#include <stdlib.h>
#include <memory.h>
typedef struct
{
	string num;
	int remainder;
} smul;
int cmp(const void *a, const void *b)
{
	return *(int *)a - *(int *)b;
}
int num, digit_sum, digit[10];
bool is_visited[5005];	
queue<smul> mul_que;
void bfs(void)
{
	int tmp;
	smul head, mul_tmp;
	mul_tmp.remainder = 0;
	mul_tmp.num = "";
	mul_que.push(mul_tmp);
	while (mul_que.empty() == false)
	{
		head = mul_que.front();
		mul_que.pop();
		for(int i = 0; i < digit_sum; i ++)
		{
			tmp = head.remainder * 10 + digit[i];
			if(tmp == 0)
				continue;
			if(tmp % num == 0)
			{
				cout << head.num << digit[i] << endl;
				return;
			}
			if(is_visited[tmp % num] == false)
			{
				is_visited[tmp % num] = true;
				mul_tmp.remainder = tmp % num;
				mul_tmp.num = head.num + (char)(digit[i] + '0');
				mul_que.push(mul_tmp);
			}
		}
	}
	cout << 0 << endl;
}
int main()
{
#ifdef _FILE_DEBUG_
	ifstream fin;
	fin.open("../input.txt");
	cin.rdbuf(fin.rdbuf()); // assign file's streambuf to cin
#ifdef _C_LAN_
	freopen("../input.txt", "r", stdin);
#endif
#endif
#ifdef _FILE_DEBUG_
	ofstream fout;
	fout.open("../output.txt");
	cout.rdbuf(fout.rdbuf()); // assign file's streambuf to cout
#ifdef _C_LAN_
	freopen("../output.txt", "w", stdout);
#endif
#endif

	while(cin >> num)
	{
		cin >> digit_sum;
		for(int i = 0; i < digit_sum; i ++)
		{
			cin >> digit[i];
		}
		// 为了能搜到小的，必须排序
		qsort(digit, digit_sum, sizeof(digit[0]), cmp);
		while (! mul_que.empty())
			mul_que.pop();
		memset(is_visited, 0, sizeof(is_visited));
		if(num == 0)
			cout << 0 << endl;//不能忘记N=0的情况，竟然会FLE
		else
			bfs();
	}
	return 0;
}