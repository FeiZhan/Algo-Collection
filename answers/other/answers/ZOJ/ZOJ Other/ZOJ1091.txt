// 1091Knight Moves
//#define _USE_FILE_
//#define _C_LAN_
#ifdef _USE_FILE_
#include <fstream>
#endif

#include <iostream>
#include <stdio.h>
#include <memory.h>
#include <string>
#include <vector>
#include <algorithm>
using namespace std;

struct Square
{
	//struct Square()
	//{}
	//struct Square(int c, int r)
	//{
	//	column = c;
	//	row = r;
	//}
	bool operator == (struct Square squ)
	{
		if (squ.column == this->column && squ.row == this->row)
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	//ostream operator << (ostream os)
	//{
	//	return os << "( " << this->column << ", " << this->row << ")";
	//}
	int column, row; 
};
int Board[8][8];
vector<struct Square> SquareQueue;
void EnQueue(struct Square squ_goto)
{
	if (squ_goto.column < 0 || squ_goto.column > 7
		|| squ_goto.row < 0 || squ_goto.row > 7)
	{
		return;
	}
	if (find(SquareQueue.begin(), SquareQueue.end(), squ_goto)
		!= SquareQueue.end())
	{
		return;
	}
	SquareQueue.push_back(squ_goto);
	struct Square squ_now = SquareQueue.at(0);
	Board[squ_goto.column][squ_goto.row] = Board[squ_now.column][squ_now.row] + 1;
}
int Bfs(struct Square squ_end)
{
	struct Square squ_now = SquareQueue.at(0);
	//cout << "( " << squ_now.column << ", " << squ_now.row << ")"
	//	<< Board[squ_now.column][squ_now.row] << endl;
	if (squ_now == squ_end)
	{
		return Board[squ_now.column][squ_now.row];
	}
	struct Square squ_goto;
	squ_goto.column = squ_now.column - 2;
	squ_goto.row = squ_now.row - 1;
	EnQueue(squ_goto);
	squ_goto.column = squ_now.column - 1;
	squ_goto.row = squ_now.row - 2;
	EnQueue(squ_goto);
	squ_goto.column = squ_now.column + 1;
	squ_goto.row = squ_now.row - 2;
	EnQueue(squ_goto);
	squ_goto.column = squ_now.column + 2;
	squ_goto.row = squ_now.row - 1;
	EnQueue(squ_goto);
	squ_goto.column = squ_now.column + 2;
	squ_goto.row = squ_now.row + 1;
	EnQueue(squ_goto);
	squ_goto.column = squ_now.column + 1;
	squ_goto.row = squ_now.row + 2;
	EnQueue(squ_goto);
	squ_goto.column = squ_now.column - 1;
	squ_goto.row = squ_now.row + 2;
	EnQueue(squ_goto);
	squ_goto.column = squ_now.column - 2;
	squ_goto.row = squ_now.row + 1;
	EnQueue(squ_goto);
	SquareQueue.erase(SquareQueue.begin());
	return 0;
}
int main()
{
#ifdef _USE_FILE_
	ifstream fin;
	fin.open("input.txt");
	cin.rdbuf(fin.rdbuf()); // assign file's streambuf to cin
#ifdef _C_LAN_
	freopen("input.txt", "r", stdin);
#endif
#endif
#ifdef _USE_FILE_
	ofstream fout;
	fout.open("output.txt");
	cout.rdbuf(fout.rdbuf()); // assign file's streambuf to cout
#ifdef _C_LAN_
	freopen("output.txt", "w", stdout);
#endif
#endif

	int min_step;
	string square_str[2];
	struct Square squ_begin, squ_end;

	while (cin >> square_str[0] >> square_str[1])
	{
		memset(Board, 0x00, sizeof(Board));
		squ_begin.column = square_str[0].at(0) - 'a';
		squ_begin.row = square_str[0].at(1) - '1';
		squ_end.column = square_str[1].at(0) - 'a';
		squ_end.row = square_str[1].at(1) - '1';
		SquareQueue.clear();
		SquareQueue.push_back(squ_begin);
		Board[squ_begin.column][squ_begin.row] = 1;
		while (true)
		{
			min_step = Bfs(squ_end);
			if (min_step > 0)
			{
				cout << "To get from " << square_str[0] << " to "
					<< square_str[1] << " takes " << min_step - 1
					<< " knight moves." << endl;
				break;
			}
		}
	}

	return 0;
}