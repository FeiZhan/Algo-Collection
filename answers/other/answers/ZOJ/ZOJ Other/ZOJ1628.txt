//1628Diamond
#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <stdlib.h>
using namespace std;
bool adjacent(const int pos[2], const vector<string> diamond)
{
	int test[2], count = 0, start, end;
	for (int j = 0; j < 2; j ++)
	{
		switch ((j == 0) ? pos[0] : pos[1])
		{
		case 1:
			start = 0;
			end = 2;
			break;
		case 2:
			start = -1;
			end = 2;
			break;
		case 7:
			start = -2;
			end = 1;
			break;
		case 8:
			start = -2;
			end = 0;
			break;
		default:
			start = -2;
			end = 2;
			break;
		}
		for (int i = start; i <= end; i ++)
		{
			if (j == 0)
			{
				test[0] = pos[0] + i;
				test[1] = pos[1];
			}
			else
			{
				test[1] = pos[1] + i;
				test[0] = pos[0];
			}
			if (diamond[pos[0] - 1][pos[1] - 1] == diamond[test[0] - 1][test[1] - 1])
			{
				count ++;
			}
			else
				count = 0;
			if (count >= 3)
			{
				//cout<<" j = "<<j<<" i = "<<i<<endl;
				return true;
			}
		}
	}
	return false;
}
int main()
{
	//streambuf *backup;
	//ifstream fin;
	//fin.open("data.txt");
	//backup = cin.rdbuf();   // back up cin's streambuf
	//cin.rdbuf(fin.rdbuf()); // assign file's streambuf to cin
							// ... cin will read from file
	////cin.rdbuf(backup);	// restore cin's original streambuf

	string str_tmp;
	vector<string> diamond;
	int change[2][2];
	bool ret1, ret2;
	while (cin>>str_tmp && cin.eof() != true)
	{
		diamond.clear();
		diamond.push_back(str_tmp);
		for (int i = 0; i < 7; i ++)
		{
			cin>>str_tmp;
			diamond.push_back(str_tmp);
		}
		cin>>change[0][0]>>change[0][1]>>change[1][0]>>change[1][1];
		if (! ( (change[0][0] == change[1][0] && abs(change[0][1] - change[1][1]) == 1)
			|| (change[0][1] == change[1][1] && abs(change[0][0] - change[1][0]) == 1)) )
		{
			cout<<"Illegal move!"<<endl;
		}
		else
		{
			swap(diamond[change[0][0] - 1][change[0][1] - 1]
				, diamond[change[1][0] - 1][change[1][1] - 1]);
			if ((ret1 = adjacent(change[0], diamond))
				|| (ret2 = adjacent(change[1], diamond)))
			{
				cout<<"Ok!"<<endl;
			}
			else
				cout<<"Illegal move!"<<endl;
		}
	}
	//system("pause");
	return 0;
}