//1315Excuses, Excuses!
//#define DEBUG
#ifdef DEBUG
#include <fstream>
#endif

#include <iostream>
#include <stdio.h>
#include <string>
#include <vector>
using namespace std;

int main()
{
#ifdef DEBUG
	ifstream fin;
	fin.open("data.txt");
	cin.rdbuf(fin.rdbuf()); // assign file's streambuf to cin
	freopen("data.txt", "r", stdin);
#endif

	bool is_first = true;
	int key_sum, excu_sum, count, max_count, case_num = 0, key_size;
	string str_tmp, excu_str, key_str;
	vector<string> key_vec;
	vector<string> excu_vec;
	vector<int> key_count_vec;
	while (cin >> key_sum >> excu_sum && cin.eof() == false)
	{
		key_vec.clear();
		excu_vec.clear();
		key_count_vec.clear();
		for (int i = 0; i < key_sum; i ++)
		{
			cin >> key_str;
			key_vec.push_back(key_str);
		}
		getline(cin, excu_str);
		for (int i = 0; i < excu_sum; i ++)
		{
			getline(cin, excu_str);
			excu_vec.push_back(excu_str);
			for (int j = 0; j < excu_str.size(); j ++)
			{
				if (excu_str.at(j) >= 'A' && excu_str.at(j) <= 'Z')
				{
					str_tmp = excu_str.at(j) - 'A' + 'a';
					excu_str.replace(j, 1, str_tmp);
				}
			}
			count = 0;
			for (int j = 0; j < key_vec.size(); j ++)
			{
				key_str = key_vec.at(j);
				key_size = key_str.size();
				for (int k = 0; k < excu_str.size() - key_size; k ++)
				{
					if (key_str == excu_str.substr(k, key_size))
					{
						if (k == 0)
						{
							if (isalpha(excu_str.at(k + key_size)) == false)
							{
								count ++;
							}
						}
						else if (k == excu_str.size() - key_size - 1)
						{
							if (isalpha(excu_str.at(k - 1)) == false)
							{
								count ++;
							}
						}
						else
						{
							if (isalpha(excu_str.at(k + key_size)) == false
								&& isalpha(excu_str.at(k - 1)) == false)
							{
								count ++;
							}
						}
					}
				}
			}
			key_count_vec.push_back(count);
		}
		max_count = 0;
		for (int i = 0; i < key_count_vec.size(); i ++)
		{
			if (max_count < key_count_vec.at(i))
			{
				max_count = key_count_vec.at(i);
			}
		}
		case_num ++;
		cout << "Excuse Set #" << case_num << endl;
		for (int i = 0; i < key_count_vec.size(); i ++)
		{
			if (key_count_vec.at(i) == max_count)
			{
				cout << excu_vec.at(i) << endl;
			}
		}
		cout << endl;
	}

#ifdef DEBUG
	system("pause");
#endif
	return 0;
}