//1047Image Perimeters
#define _FILE_DEBUG_
//#define _C_LAN_
//#define _DEBUG_OUTPUT_
#ifdef _FILE_DEBUG_
#include <fstream>
#endif
#include <iostream>
#include <stdio.h>
using namespace std;

int mat_size[2], mouse_pos[2], peri;
bool mat[22][22], is_visited[22][22];
bool CalcPeri(const int pos1, const int pos2)
{
	const int NEXT[4][2] = {{0, 1}, {1, 0}, {-1, 0}, {0, -1}};
	int next[2];
	for (int i = 0; i < 4; ++ i)
	{
		next[0] = pos1 + NEXT[i][0];
		next[1] = pos2 + NEXT[i][1];
		if (next[0] < 0 || next[0] >= mat_size[0]
			|| next[1] < 0 || next[1] >= mat_size[1]
			|| mat[next[0]][next[1]] == false)
		{
			peri ++;
		}
	}
	return true;
}
bool Dfs(const int pos1, const int pos2)
{
	if (pos1 >= mat_size[0] || pos2 >= mat_size[1]
		|| is_visited[pos1][pos2] == true || mat[pos1][pos2] == false)
	{
		return false;
	}
	is_visited[pos1][pos2] = true;
	CalcPeri(pos1, pos2);
	const int NEXT[8][2] = {{0, 1}, {1, 0}, {-1, 0}, {0, -1}, {1, 1}
		, {-1, 1}, {-1, -1}, {1, -1}};
	int next[2];
	for (int i = 0; i < 8; ++ i)
	{
		next[0] = pos1 + NEXT[i][0];
		next[1] = pos2 + NEXT[i][1];
		if (next[0] < 0 || next[0] >= mat_size[0]
			|| next[1] < 0 || next[1] >= mat_size[1]
			|| is_visited[next[0]][next[1]] == true
			|| mat[next[0]][next[1]] == false)
		{
			continue;
		}
		Dfs(next[0], next[1]);
	}
	return true;
}

int main(int argc, char *argv[])
{
#ifdef _FILE_DEBUG_
	ifstream fin;
	fin.open("../input.txt");
	cin.rdbuf(fin.rdbuf()); // assign file's streambuf to cin
#ifdef _C_LAN_
	freopen("../input.txt", "r", stdin);
#endif
#endif
#ifdef _FILE_DEBUG_
	ofstream fout;
	fout.open("../output.txt");
	cout.rdbuf(fout.rdbuf()); // assign file's streambuf to cout
#ifdef _C_LAN_
	freopen("../output.txt", "w", stdout);
#endif
#endif

	char tmp;
	while (cin >> mat_size[0] >> mat_size[1] && (mat_size[0] || mat_size[1]))
	{
		cin >> mouse_pos[0] >> mouse_pos[1];
		for (int i = 0; i < mat_size[0]; ++ i)
		{
			for (int j = 0; j < mat_size[1]; ++ j)
			{
				//if (i == 0 || j == 0 || i == mat_size[0] + 1 || j == mat_size[1] + 1)
				//{
				//	mat[i][j] = false;
				//	continue;
				//}
				cin >> tmp;
				is_visited[i][j] = false;
				switch (tmp)
				{
				case '.':
					mat[i][j] = false;
					break;
				case 'X':
					mat[i][j] = true;
					break;
				}
			}
		}
		peri = 0;
		Dfs(mouse_pos[0] - 1, mouse_pos[1] - 1);
		cout << peri << endl;
	}

	return 0;
}