//1159 487-3279
#define _FILE_DEBUG_
//#define _C_LAN_
//#define _DEBUG_OUTPUT_
#ifdef _FILE_DEBUG_
#include <fstream>
#endif
#include <iostream>
#include <stdio.h>
#include <string>
#include <map>
#include <algorithm>
using namespace std;

int main()
{
#ifdef _FILE_DEBUG_
	ifstream fin;
	fin.open("../input.txt");
	cin.rdbuf(fin.rdbuf()); // assign file's streambuf to cin
#ifdef _C_LAN_
	freopen("../input.txt", "r", stdin);
#endif
#endif
#ifdef _FILE_DEBUG_
	ofstream fout;
	fout.open("../output.txt");
	cout.rdbuf(fout.rdbuf()); // assign file's streambuf to cout
#ifdef _C_LAN_
	freopen("../output.txt", "w", stdout);
#endif
#endif

	bool dup_flag;
	int case_sum, phone_sum;
	int key[33] = {2,2,2, 3,3,3, 4,4,4, 5,5,5, 6,6,6, 7,0,7,7, 8,8,8, 9,9,9 } ;
	string phone, tmp;
	char tmp_char;
	map<string, int> phone_map;
	map<string, int>::iterator map_it;
	cin >> case_sum;
	while (case_sum --)
	{
		phone_map.clear();
		cin >> phone_sum;
		for (int i = 0; i < phone_sum; i ++)
		{
			cin >> phone;
			tmp.clear();
			for (int j = 0; j < phone.size(); j ++)
			{
				//if (phone.at(j) == '-')	//应该是这里错了
				//	phone.erase(j, 1);
				//if (j >= phone.size())
				//	break;
				if (isdigit(phone.at(j)))
				{
					tmp.push_back(phone.at(j));
				}
				else if (isalpha(phone.at(j)))
				{
					switch(phone.at(j))
					{
					case 'A':
					case 'B':
					case 'C':
						tmp_char = '2';
						break;
					case 'D':
					case 'E':
					case 'F':
						tmp_char = '3';
						break;
					case 'G':
					case 'H':
					case 'I':
						tmp_char = '4';
						break;
					case 'J':
					case 'K':
					case 'L':
						tmp_char = '5';
						break;
					case 'M':
					case 'N':
					case 'O':
						tmp_char = '6';
						break;
					case 'P':
					case 'R':
					case 'S':
						tmp_char = '7';
						break;
					case 'T':
					case 'U':
					case 'V':
						tmp_char = '8';
						break;
					case 'W':
					case 'X':
					case 'Y':
						tmp_char = '9';
						break;
					default:
						break;
					}
					//tmp.push_back('0' + key[phone.at(j) - 'A']);
					tmp.push_back(tmp_char);
				}
			}
			tmp.insert(tmp.begin() + 3, 1, '-');
			phone = tmp;
			//map_it = phone_map.find(phone);
			//if (map_it == phone_map.end())
			//{
			//	phone_map.insert(pair<string, int> (phone, 1));
			//}
			//else
			//{
			//	(*map_it).second ++;
			//}
			phone_map[phone] ++;
		}
		dup_flag = false;
		for (map_it = phone_map.begin(); map_it != phone_map.end(); map_it ++)
		{
			if (map_it->second > 1)
			{
				cout << map_it->first << " " << map_it->second	<< endl;
				dup_flag = true;
			}
		}
		if (dup_flag == false)
			cout << "No duplicates." << endl;
		if (case_sum > 0)
			cout << endl;
	}
	return 0;
}