//1635Directory Listing
#define _FILE_DEBUG_
//#define _C_LAN_
//#define _DEBUG_OUTPUT_
#ifdef _FILE_DEBUG_
#include <fstream>
#endif
#include <iostream>
#include <stdio.h>
using namespace std;
#include <string>
#include <memory.h>
#include <queue>
#include <stack>
#include <vector>

typedef struct tnode
{
	string text;
	int depth;
	int size;
	vector<struct tnode*> child;
	struct tnode *parent;
} stnode;
queue<stnode*> t_qu, t_qu_tmp; //队列，用于输入
stack<stnode*> t_st; //栈，用于输出
stnode* InputTree(void);
void ParseLine(string, int);
void AddChildNodes(string, int);
void OutputTree(stnode);

stnode* InputTree(void)
{
	int size, depth = 0;
	string buf, line;
	stnode *node = NULL, *root = NULL;
	//是否读到文件尾
	if (cin >> buf >> size == NULL || size < 0)
	{
		return NULL;
	}
	//申请首个节点空间，入列
	root = new stnode;
	root->parent = NULL;
	//memset(root, 0x0, sizeof(stnode));
	root->size = size;
	root->text = buf;
	root->depth = 0;
	t_qu.push(root);
	//循环读入每一行
	while (t_qu.empty() == false)
	{
		getline(cin, line);
		if (line.size() == 0)
			continue;
		ParseLine(line, ++ depth);	//不同之处
	}
	return root;
}
void ParseLine(string line, int depth)
{
	int begin, now;
	begin = now = 0;
	while (now < line.size())
	{
		switch(line.at(now))
		{
		case '(':
			begin = now + 1;
			break;
		case ')':
			AddChildNodes(line.substr(begin, now - begin), depth);
			break;
		}
		now ++;
	}
}
string StrSplit(string &source, char split)
{
	string ret;
	int sp = source.find(split);
	if (sp == string::npos)
	{
		ret = source;
		source.clear();
	}
	else
	{
		ret = source.substr(0, sp);
		source.erase(0, sp + 1);
	}
	return ret;
}
void AddChildNodes(string str, int depth)
{
	stnode *parent, *node, *tmp;
	if (str.compare(")") == 0)
	{
       parent = t_qu.front();
           t_qu_tmp.push(parent);
		t_qu.pop();
		return;
	}
	int size_ptr;
	string token = StrSplit(str, ' ');
	//出列一个节点
    parent = t_qu.front();
    t_qu_tmp.push(parent);
    t_qu.pop();
	while (token.size() > 0)
	{
		node = new stnode;
		node->parent= NULL;
		//memset(node, 0, sizeof(stnode));
		node->depth = depth;
		node->text = token;
		//如果是文件夹，则入列
		if (token.at(0) == '*')
		{
			t_qu.push(node);
		}
		//读入size
		token = StrSplit(str, ' ');
		size_ptr = 0;
		node->size = 0;
		while (size_ptr < token.size() && token.at(size_ptr) >= '0'
			&& token.at(size_ptr) <= '9')
		{
			node->size *= 10;
			node->size += int(token.at(size_ptr) - '0');
			size_ptr ++;
		}
		//添加该子节点
		parent->child.push_back(node);
		node->parent = parent;
		//累加父节点的size
		tmp = parent;
		while (tmp != NULL)
		{
			tmp->size += node->size;
			tmp = tmp->parent;
		}
		token = StrSplit(str, ' ');
	}
}
//设置某个节点的前导部分
void SetPrefix(stnode *node, string &buff)
{
	int depth = node->depth;
	stnode *tmp, *parent = NULL;
	buff.clear();
	if (depth > 0)
	{
		for (int i = 0; i < depth * 8; i ++)
		{
			buff += ' ';
		}
	}
	//从下向上去判断
	tmp = node->parent;
	while (tmp != NULL && tmp->depth > 0)
	{
		parent = tmp->parent;
		//从父节点的子节点集合中最后向前找
		//如果不是最后一个节点，则把空格改为竖线
		for (int i = parent->child.size() - 1; i >= 0; i --)
		{
			//如果tmp不是父节点的最后一个子节点
			if (parent->child.size() > 0 && parent->child.at(i) != tmp)
			{
				buff[tmp->depth * 8] = '|';
				break;
			}
			//如果是最后一个节点
			if (parent->child.at(i) == tmp)
				break;
		}
		tmp = parent;
	}
}
//栈前序输出
void OutputTree(stnode *head)
{
	stnode *node;
	string prefix; //前导字符串
	if (t_qu_tmp.empty() == true)
	{
		return;
    }
	//根节点入栈
	t_st.push(head);
	//当栈不为空时
	while (t_st.empty() == false)
	{
		node = t_st.top();	//弹出一个节点
		t_st.pop();
		//设置节点的前导
		SetPrefix(node, prefix);
		cout << prefix << "|_" << node->text << "[" << node->size
             << "]" << endl;
		//node的子节点从右到左入栈
		for (int i = node->child.size() - 1; i >= 0; i --)
		{
		    t_st.push(node->child.at(i));
		}
	}
}
int main(void)
{
#ifdef _FILE_DEBUG_
	ifstream fin;
	fin.open("../input.txt");
	cin.rdbuf(fin.rdbuf()); // assign file's streambuf to cin
#ifdef _C_LAN_
	freopen("../input.txt", "r", stdin);
#endif
#endif
#ifdef _FILE_DEBUG_
	ofstream fout;
	fout.open("../output.txt");
	cout.rdbuf(fout.rdbuf()); // assign file's streambuf to cout
#ifdef _C_LAN_
	freopen("../output.txt", "w", stdout);
#endif
#endif

	stnode *tree;
	while ((tree = InputTree()) != NULL)
	{
		OutputTree(tree);
	}
	return 0;
}

