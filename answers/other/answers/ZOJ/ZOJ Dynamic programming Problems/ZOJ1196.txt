//1196Fast Food
#define _FILE_DEBUG_
//#define _C_LAN_
//#define _DEBUG_OUTPUT_
#ifdef _FILE_DEBUG_
#include <fstream>
#endif
#include <iostream>
#include <stdio.h>
using namespace std;

#include <memory.h>
#include <limits.h>
#define RES_MAX 201
#define DEPOT_MAX 31
#define min(a, b) (((a) < (b)) ? (a) : (b))
int res_pos[RES_MAX], cost[RES_MAX][RES_MAX], dist[RES_MAX][DEPOT_MAX];
int dp(int res_sum, int dep_sum)
{
	if (res_sum == dep_sum)
		return 0;
	int mid;
	memset(cost, 0, sizeof(cost));
	for (int i = 0; i < res_sum; i ++)
	{
		for (int j = i; j < res_sum; j ++)
		{
			mid = (i + j) / 2;
			for (int k = i; k < mid; k ++)
			{
				cost[i][j] += res_pos[mid] - res_pos[k];
			}
			for (int k = mid + 1; k <= j; k ++)
			{
				cost[i][j] += res_pos[k] - res_pos[mid];
			}
		}
	}
	for (int i = 0; i < res_sum; i ++)
	{
		for (int j = 0; j < dep_sum; j ++)
		{
			dist[i][j] = INT_MAX;
		}
	}
	for (int i = 0; i < res_sum; i ++)
	{
		dist[i][0] = cost[0][i];
	}
	for (int i = 1; i < dep_sum; i ++)
	{
		for (int j = i; j < res_sum; j ++)
		{
			for (int k = i - 1; k < j; k ++)
			{
				dist[j][i] = min(dist[j][i], dist[k][i - 1] + cost[k + 1][j]);
			}
		}
	}
	return dist[res_sum - 1][dep_sum - 1];
}
int main()
{
#ifdef _FILE_DEBUG_
	ifstream fin;
	fin.open("../input.txt");
	cin.rdbuf(fin.rdbuf()); // assign file's streambuf to cin
#ifdef _C_LAN_
	freopen("../input.txt", "r", stdin);
#endif
#endif
#ifdef _FILE_DEBUG_
	ofstream fout;
	fout.open("../output.txt");
	cout.rdbuf(fout.rdbuf()); // assign file's streambuf to cout
#ifdef _C_LAN_
	freopen("../output.txt", "w", stdout);
#endif
#endif

	int res_sum, dep_sum, case_num = 1;
	while (cin >> res_sum >> dep_sum && res_sum && dep_sum)
	{
		for (int i = 0; i < res_sum; i ++)
		{
			cin >> res_pos[i];
		}
		cout << "Chain " << case_num ++ << endl << "Total distance sum = "
			<< dp(res_sum, dep_sum) << endl << endl;
	}
	return 0;
}