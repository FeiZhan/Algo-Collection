//1108FatMouse's Speed
//#define _FILE_DEBUG_
//#define _C_LAN_
//#define _DEBUG_OUTPUT_
#ifdef _FILE_DEBUG_
#include <fstream>
#endif
#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <memory.h>
#include <stack>
#define MAX_MICE 1010
using namespace std;

struct Mice
{
	int weight, speed, num;
} mice[MAX_MICE];
stack<int> mice_st;
int index_z[MAX_MICE];
int Cmp(const void *a, const void *b)
{
	struct Mice *c = (struct Mice *)a, *d = (struct Mice *)b;
	if (c->weight == d->weight)
	{
		return c->speed - d->speed;
	}
	else
	{
		return c->weight - d->weight;
	}
}
int main()
{
#ifdef _FILE_DEBUG_
	ifstream fin;
	fin.open("input.txt");
	cin.rdbuf(fin.rdbuf()); // assign file's streambuf to cin
#ifdef _C_LAN_
	freopen("input.txt", "r", stdin);
#endif
#endif
#ifdef _FILE_DEBUG_
	ofstream fout;
	fout.open("output.txt");
	cout.rdbuf(fout.rdbuf()); // assign file's streambuf to cout
#ifdef _C_LAN_
	freopen("output.txt", "w", stdout);
#endif
#endif

    memset(index_z, 0x0, sizeof(index_z));
	int mouse_num = 0;
	while (cin >> mice[mouse_num].weight >> mice[mouse_num].speed)
	{
		mice[mouse_num].num = mouse_num;
		mouse_num ++;
	}
    qsort(mice, mouse_num, sizeof(struct Mice), Cmp);
	int len[MAX_MICE], sum, temp;
    memset(len, 0x0, sizeof(len));  
    len[0] = 1;  

	for(int i = 1; i < mouse_num; i ++)
	{
		sum = 0;
		for(int j = 0; j < i; j ++)
		{
			if( len[j] > sum && mice[i].weight > mice[j].weight
				&& mice[i].speed < mice[j].speed )  
            {
                    temp = j;
                    sum = len[j];
            }
		}
        if( sum != 0 )
            index_z[i] = temp;
        else
            index_z[i] = 0;
        len[i] = sum + 1;
    }
	int max = 0;
	for (int i = 0; i < mouse_num; i ++)
	{
		if (len[i] > max)
		{
			temp = i;
			max = len[i];
		}
	}
	cout << max << endl;
	while (index_z[temp] != 0)
	{
		mice_st.push(mice[temp].num + 1);
		temp = index_z[temp];
	}
	mice_st.push(mice[temp].num + 1);
	while (mice_st.empty() == false)
	{
		cout << mice_st.top() << endl;
		mice_st.pop();
	}
	return 0;
}