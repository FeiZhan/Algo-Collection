//1093Monkey and Banana
#include <iostream>
//#include <fstream>
//#define cin filein
using namespace std;
typedef class MaxHeight
{
public:
	int max_height[30][3][3];
	bool valid[30][3][3];
	void clear()
	{
		for (int i = 0; i < 30; i ++)
		{
			for (int j = 0; j < 3; j ++)
			{
				for (int k = 0; k < 3; k ++)
				{
					valid[i][j][k] = false;
				}
			}
		}
	}
}	CMaxHeight;
CMaxHeight cMaxHeight;
int DfsHeight(int block_num, int face1, int face2, const int block[30][3], int block_sum)
{
	int my_hi = block[block_num][3 - face1 - face2], max_height = 0
		, cur_height = 0;
	for (int i = 0; i < block_sum; i ++)
	{
		for (int j = 0; j < 3; j ++)
		{
			if (block[i][j] < block[block_num][face1])
			{
				for (int k = 0; k < 3; k ++)
				{
					if (j == k)
					{
						continue;
					}
					else
					{
						if (block[i][k] < block[block_num][face2])
						{
							if (cMaxHeight.valid[i][j][k] == true)
							{
								cur_height = cMaxHeight.max_height[i][j][k];
							}
							else
								cur_height = DfsHeight(i, j, k, block, block_sum);
							if (cur_height > max_height)
							{
								max_height = cur_height;
							}
						}
					}
				}
			}
		}
	}
	max_height += my_hi;
	if (cMaxHeight.valid[block_num][face1][face2] == false
		|| cMaxHeight.max_height[block_num][face1][face2] < max_height)
	{
		cMaxHeight.max_height[block_num][face1][face2] = max_height;
		cMaxHeight.valid[block_num][face1][face2] = true;
	}
	return max_height;
}
int main()
{
	//ifstream filein("..//data.txt", ios::in);

	int block_sum, block[30][3], max_height, case_num = 0;
	while (cin>>block_sum && block_sum != NULL && ++ case_num)
	{
		cMaxHeight.clear();
		for (int i = 0; i < block_sum; i ++)
		{
			for (int j = 0; j < 3; j ++)
			{
				cin>>block[i][j];
			}
		}
		for (int i = 0; i < block_sum; i ++)
		{
			for (int j = 0; j < 3; j ++)
			{
				for (int k = 0; k < 3; k ++)
				{
					if (k == j)
					{
						continue;
					}
					else
						DfsHeight(i, j, k, block, block_sum);
				}
			}
		}
		max_height = 0;
		for (int i = 0; i < block_sum; i ++)
		{
			for (int j = 0; j < 3; j ++)
			{
				for (int k = 0;k < 3; k ++)
				{
					if (j != k && cMaxHeight.max_height[i][j][k] > max_height)
					{
						max_height = cMaxHeight.max_height[i][j][k];
					}
				}
			}
		}
		cout<<"Case "<<case_num<<": maximum height = "<<max_height<<endl;
	}

	//system("pause");
	return 0;
}