//1203Swordfish
#define _FILE_DEBUG_
//#define _C_LAN_
//#define _DEBUG_OUTPUT_
#ifdef _FILE_DEBUG_
#include <fstream>
#endif
#include <iostream>
#include <stdio.h>
using namespace std;

#include <stdlib.h>
#include <iomanip>
#include <math.h>
#include <limits.h>
#include <memory.h>
#define CITY_MAX 110

double city[CITY_MAX][2], map[CITY_MAX][CITY_MAX];
int city_sum;
double prim()
{
	double dist[CITY_MAX], min_dist, sum_dist = 0;
	bool is_checked[CITY_MAX];
	memset(is_checked, 0x0, sizeof(is_checked));
	for(int i = 0; i < city_sum; i ++)
	{
	    dist[i] = INT_MAX;
	}
	int now = 0;
	dist[now] = 0;
	//遍历每个节点（后面的计算与i的值无关）
	for (int i = 0; i < city_sum - 1; i ++)
	{
		is_checked[now] = true;
		for (int j = 0; j < city_sum; j ++)
		{
			//检查每个生成树之外的节点，计算它与树的距离
			if (is_checked[j] == false && dist[j] > map[now][j])
			{
				dist[j] = map[now][j];
			}
		}
		min_dist = INT_MAX;
		for (int j = 0; j < city_sum; j ++)
		{
			//检查每个生成树之外的节点，取最近的节点作为下一个基准节点
			if (is_checked[j] == false && min_dist > dist[j])
			{
				min_dist = dist[j];
				now = j;
			}
		}
		sum_dist += min_dist;
	}
	return sum_dist;
}
int main()
{
#ifdef _FILE_DEBUG_
	ifstream fin;
	fin.open("../input.txt");
	cin.rdbuf(fin.rdbuf()); // assign file's streambuf to cin
#ifdef _C_LAN_
	freopen("../input.txt", "r", stdin);
#endif
#endif
#ifdef _FILE_DEBUG_
	ofstream fout;
	fout.open("../output.txt");
	cout.rdbuf(fout.rdbuf()); // assign file's streambuf to cout
#ifdef _C_LAN_
	freopen("../output.txt", "w", stdout);
#endif
#endif

	int case_num = 1;
	while (cin >> city_sum && city_sum > 0)
	{
		for (int i = 0; i < city_sum; i ++)
		{
			cin >> city[i][0] >> city[i][1];
		}
		for (int i = 0; i < city_sum; i ++)
		{
			for (int j = 0; j < city_sum; j ++)
			{
				map[i][j] = map[j][i] = sqrt((city[i][0] - city[j][0])
					* (city[i][0] - city[j][0]) + (city[i][1] - city[j][1])
					* (city[i][1] - city[j][1]));
			}
		}
		if (case_num > 1)
			cout << endl;
		cout << "Case #" << case_num << ":" << endl
			<< "The minimal distance is: " << setiosflags(ios::fixed)
			<< setprecision(2) << prim() << endl;
		case_num ++;
	}
	return 0;
}