//1708Robot Motion
#define _FILE_DEBUG_
//#define _C_LAN_
//#define _DEBUG_OUTPUT_
#ifdef _FILE_DEBUG_
#include <fstream>
#endif
#include <iostream>
#include <stdio.h>
using namespace std;

#include <memory.h>
#include <string>
int main()
{
#ifdef _FILE_DEBUG_
	ifstream fin;
	fin.open("../input.txt");
	cin.rdbuf(fin.rdbuf()); // assign file's streambuf to cin
#ifdef _C_LAN_
	freopen("../input.txt", "r", stdin);
#endif
#endif
#ifdef _FILE_DEBUG_
	ofstream fout;
	fout.open("../output.txt");
	cout.rdbuf(fout.rdbuf()); // assign file's streambuf to cout
#ifdef _C_LAN_
	freopen("../output.txt", "w", stdout);
#endif
#endif

	int grid_size[2], start_pos, next[2], step, visit[15][15];
	string grid[15];
	bool is_out;
	while (cin >> grid_size[0] >> grid_size[1] >> start_pos && grid_size[0] > 0)
	{
		for (int i = 0; i < grid_size[0]; i ++)
		{
			cin >> grid[i];
		}
		memset(visit, 0, sizeof(visit));
		step = 0;
		next[0] = 0;
		next[1] = start_pos - 1;
		is_out = false;
		while (visit[next[0]][next[1]] == 0)
		{
			step ++;
			visit[next[0]][next[1]] = step;
			switch (grid[next[0]][next[1]])
			{
			case 'N':
				next[0] --;
				break;
			case 'S':
				next[0] ++;
				break;
			case 'E':
				next[1] ++;
				break;
			case 'W':
				next[1] --;
				break;
			}
			if (next[0] < 0 || next[0] >= grid_size[0]
				|| next[1] < 0 || next[1] >= grid_size[1])
			{
				is_out = true;
				break;
			}
		}
		if (is_out == true)
		{
			cout << step << " step(s) to exit" << endl;
		}
		else
		{
			cout << visit[next[0]][next[1]] - 1
				<< " step(s) before a loop of " << step - visit[next[0]][next[1]] + 1
				<< " step(s)" << endl;
		}
	}

	return 0;
}