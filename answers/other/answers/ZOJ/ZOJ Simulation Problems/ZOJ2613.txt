// 2613Auction
//#define _FILE_IN_
//#define _FILE_OUT_
//#define _C_LAN_

#ifdef _FILE_IN_
#include <fstream>
#endif

#include <iostream>
#include <stdio.h>
#include <string>
#include <vector>
#include <map>
using namespace std;

int main()
{
#ifdef _FILE_IN_
	ifstream fin;
	fin.open("input.txt");
	cin.rdbuf(fin.rdbuf()); // assign file's streambuf to cin
#ifdef _C_LAN_
	freopen("input.txt", "r", stdin);
#endif
#endif
#ifdef _FILE_OUT_
	ofstream fout;
	fout.open("output.txt");
	cout.rdbuf(fout.rdbuf()); // assign file's streambuf to cout
#ifdef _C_LAN_
	freopen("output.txt", "w", stdout);
#endif
#endif

	int case_sum, limit, bid_sum, price, count_min, bid_min;
	string bid_name, min_name;
	map<int, int> price_count;
	map<int, int>::iterator price_count_it;
	map<int, string> price_name;
	cin >> case_sum;
	for (int i = 1; i <= case_sum; i ++)
	{
		price_count.clear();
		price_name.clear();
		cin >> limit >> bid_sum;
		for (int j = 0; j < bid_sum; j ++)
		{
			cin >> bid_name >> price;
			if (price_count.find(price) == price_count.end())
			{
				price_count.insert(pair<int, int> (price, 1));
				price_name.insert(pair<int, string> (price, bid_name));
			}
			else
			{
				price_count_it = price_count.find(price);
				price_count_it->second ++;
			}
		}
		count_min = 30000;
		for (price_count_it = price_count.begin(); price_count_it != price_count.end()
			; price_count_it ++)
		{
			//cout << price_count_it->first << " " << price_count_it->second << " "
			//	<< price_name.find(price_count_it->first)->second;
			if (price_count_it->second < count_min)
			{
				count_min = price_count_it->second;
				bid_min = price_count_it->first;
				min_name = price_name.find(price_count_it->first)->second;
			}

		}
		cout << "Case " << i << ":" << endl
			<< "The winner is " << min_name << "." << endl
			<< "The price is " << bid_min << ".";
		if (i < case_sum)
		{
			cout << endl << endl;
		}
	}

#ifdef _FILE_IN_
#ifndef _FILE_OUT_
	system("pause");
#endif
#endif
	return 0;
}