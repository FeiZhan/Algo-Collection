//1217Eight
#define _FILE_DEBUG_
//#define _C_LAN_
//#define _DEBUG_OUTPUT_
#ifdef _FILE_DEBUG_
#include <fstream>
#endif
#include <iostream>
#include <stdio.h>
using namespace std;

#include <queue>
#include <memory.h>
#define MAX 400000

struct sstate
{
	int state[9];
	int pos;
	string path;
};
const int dir[4][2] = {{-1, 0}, {0, 1}, {1, 0}, {0, -1}};
const int factor[9] = {1, 1, 2, 6, 24, 120, 720, 5040, 40320};
string path[MAX];
bool is_vis[MAX];
const char dir_char[4] = {'d', 'l', 'u', 'r'};
queue<sstate> q;
int hash(int s[])
{
	int tmp, num = 0;
	for (int i = 0; i < 9; ++ i)
	{
		tmp = 0;
		for (int j = i + 1; j < 9; ++ j)
		{
			if (s[j] < s[i])
			{
				++ tmp;
			}
		}
		num += factor[8 - i] * tmp;
	}
	return num;
}
void bfs(void)
{
	while (! q.empty())
	{
		q.pop();
	}
	sstate goal;
	memset(is_vis, 0, sizeof(is_vis));
	for (int i = 0; i < 8; ++ i)
	{
		goal.state[i] = i + 1;
	}
	goal.state[8] = 9;
	goal.path = "";
	goal.pos = 8;
	q.push(goal);
	is_vis[0] = true;
	int x, y, r, c;
	while (! q.empty())
	{
		sstate now = q.front();
		q.pop();
		x = now.pos / 3;
		y = now.pos % 3;
		for (int i = 0; i < 4; ++ i)
		{
			r = x + dir[i][0];
			c = y + dir[i][1];
			if (r < 0 || r > 2 || c < 0 || c > 2)
			{
				continue;
			}
			sstate tmp = now;
			tmp.state[tmp.pos] = tmp.state[3 * r + c];
			tmp.pos = 3 * r + c;
			tmp.state[tmp.pos] = 9;
			int hash_tmp = hash(tmp.state);
			if (is_vis[hash_tmp])
				continue;
			is_vis[hash_tmp] = true;
			tmp.path += dir_char[i];
			path[hash_tmp] = tmp.path;
			q.push(tmp);
		}
	}
}
int main(int argc, char *argv[])
{
#ifdef _FILE_DEBUG_
	ifstream fin;
	fin.open("../input.txt");
	cin.rdbuf(fin.rdbuf());
#ifdef _C_LAN_
	freopen("../input.txt", "r", stdin);
#endif
#endif
#ifdef _FILE_DEBUG_
	ofstream fout;
	fout.open("../output.txt");
	cout.rdbuf(fout.rdbuf());
#ifdef _C_LAN_
	freopen("../output.txt", "w", stdout);
#endif
#endif

	sstate star;
	char input;
	int hash_tmp;
	bfs();
	while (cin >> input)
	{
		if (input == 'x')
		{
			star.pos = 0;
			star.state[0] = 9;
		}
		else
		{
			star.state[0] = input - '0';
		}
		for (int i = 1; i < 9; ++ i)
		{
			cin >> input;
			if (input == 'x')
			{
				star.pos = i;
			}
			star.state[i] = input - '0';
		}
		hash_tmp = hash(star.state);
		if (is_vis[hash_tmp])
		{
			for (int i = path[hash_tmp].size() - 1; i >= 0; -- i)
			{
				cout << path[hash_tmp][i];
			}
			cout << endl;
		}
		else
			cout << "unsolvable" << endl;
	}

	return 0;
}