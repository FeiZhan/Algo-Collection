//1649Rescue
#define _FILE_DEBUG_
//#define _C_LAN_
//#define _DEBUG_OUTPUT_
#ifdef _FILE_DEBUG_
#include <fstream>
#endif
#include <iostream>
#include <stdio.h>
using namespace std;
#include <string>
#include <limits.h>
#include <queue>
#define MAT_MAX 200
typedef struct
{
	int x, y;
} smat;
int mat_size[2], mat[MAT_MAX][MAT_MAX], mat_time[MAT_MAX][MAT_MAX];
const int MOVE[4][2] = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
queue<smat> smat_qu;
void Bfs(smat f_pos)
{
	int f_time = mat_time[f_pos.x][f_pos.y], tar_time;
	smat target;
	for (int i = 0; i < 4; i ++)
	{
		target.x = f_pos.x + MOVE[i][0];
		target.y = f_pos.y + MOVE[i][1];
		if (target.x < 0 || target.x >= mat_size[0]
			|| target.y < 0 || target.y >= mat_size[1])
		{
			continue;
		}
		switch(mat[target.x][target.y])
		{
		case 1:
		case 3:
		case 4:
			if (mat[target.x][target.y] == 3)
				tar_time = 2;
			else
				tar_time = 1;
			if (mat_time[target.x][target.y] > f_time + tar_time)
			{
				mat_time[target.x][target.y] = f_time + tar_time;
				if (mat[target.x][target.y] != 4)
					smat_qu.push(target);
			}
			break;
		}
	}
}
int main()
{
#ifdef _FILE_DEBUG_
	ifstream fin;
	fin.open("../input.txt");
	cin.rdbuf(fin.rdbuf()); // assign file's streambuf to cin
#ifdef _C_LAN_
	freopen("../input.txt", "r", stdin);
#endif
#endif
#ifdef _FILE_DEBUG_
	ofstream fout;
	fout.open("../output.txt");
	cout.rdbuf(fout.rdbuf()); // assign file's streambuf to cout
#ifdef _C_LAN_
	freopen("../output.txt", "w", stdout);
#endif
#endif

	string str_in;
	smat f_init, angel;
	while (cin >> mat_size[0] >> mat_size[1])
	{
		for (int i = 0; i < mat_size[0]; i ++)
		{
			cin >> str_in;
			for (int j = 0; j < str_in.size(); j ++)
			{
				switch (str_in.at(j))
				{
				case '.':
					mat[i][j] = 1;
					break;
				case '#':
					mat[i][j] = 2;
					break;
				case 'x':
					mat[i][j] = 3;
					break;
				case 'a':
					mat[i][j] = 4;
					angel.x = i;
					angel.y = j;
					break;
				case 'r':
					mat[i][j] = 5;
					f_init.x = i;
					f_init.y = j;
					break;
				default:
					break;
				}
				mat_time[i][j] = INT_MAX;
			}
		}
		mat_time[f_init.x][f_init.y] = 0;
		if (smat_qu.empty() == false)
			smat_qu.pop();
		smat_qu.push(f_init);
		while (smat_qu.empty() == false)
		{
			//cout << smat_qu.front().x << " " << smat_qu.front().y << endl;
			Bfs(smat_qu.front());
			smat_qu.pop();
		}
        if( mat_time[angel.x][angel.y] != INT_MAX )
			cout << mat_time[angel.x][angel.y] << endl;
        else  
            cout << "Poor ANGEL has to stay in the prison all his life." << endl;  
	}
	return 0;
}