//1205Martian Addition
//#define _USE_FILE_
//#define _C_LAN_
#ifdef _USE_FILE_
#include <fstream>
#endif

#include <iostream>
#include <stdio.h>
#include <string>
using namespace std;
void Rev(string &str)
{
	long size = str.size();
	char tmp;
	for (int i = 0; i < size / 2.0; i ++)
	{
		tmp = str.at(i);
		str.at(i) = str.at(size - i - 1);
		str.at(size - i - 1) = tmp;
	}
}
int main()
{
#ifdef _USE_FILE_
	ifstream fin;
	fin.open("input.txt");
	cin.rdbuf(fin.rdbuf()); // assign file's streambuf to cin
#ifdef _C_LAN_
	freopen("input.txt", "r", stdin);
#endif
#endif
#ifdef _USE_FILE_
	ofstream fout;
	fout.open("output.txt");
	cout.rdbuf(fout.rdbuf()); // assign file's streambuf to cout
#ifdef _C_LAN_
	freopen("output.txt", "w", stdout);
#endif
#endif

	string str_in[2], str_out;
	int carry, add, min_num, max_num;
	char num[2];
	while (cin >>str_in[0] >> str_in[1])
	{
		cout << str_in[0] << str_in[1] << endl;
		Rev(str_in[0]);
		Rev(str_in[1]);
		min_num = (str_in[0].size() < str_in[1].size()) ? 0 : 1;
		max_num = (str_in[0].size() > str_in[1].size()) ? 0 : 1;
		str_out.reserve(max_num + 1);
		carry = 0;
		str_out.clear();
		for (int i = 0; i < str_in[min_num].size(); i ++)
		{
			if (str_in[0].at(i) >= '0' && str_in[0].at(i) <= '9')
			{
				num[0] = str_in[0].at(i) - '0';
			}
			else if (str_in[0].at(i) >= 'a' && str_in[0].at(i) <= 'z')
			{
				num[0] = str_in[0].at(i) - 'a' + 10;
			}
			if (str_in[1].at(i) >= '0' && str_in[1].at(i) <= '9')
			{
				num[1] = str_in[1].at(i) - '0';
			}
			else if (str_in[1].at(i) >= 'a' && str_in[1].at(i) <= 'z')
			{
				num[1] = str_in[1].at(i) - 'a' + 10;
			}
			add = num[0] + num[1] + carry;
			if (add >= 20)
			{
				add -= 20;
				carry = 1;
			}
			else
				carry = 0;
			if (add >= 10 && add + 'a' == 'k')
			{
				add += 0;
			}
			if (add < 10)
			{
				str_out.at(i) = add + '0';
			}
			else
			{
				str_out.at(i) = add - 10 + 'a';
			}
		}
		if (str_in[max_num].size() - str_in[min_num].size() >= 0 && carry == 1)
		{
			str_out.at(str_in[min_num].size()) = '1';
		}
		for (int i = str_in[min_num].size(); i < str_in[max_num].size(); i ++)
		{
			str_out.at(i) = str_in[max_num].at(i);
			if (carry == 1)
			{
				str_out.at(i) ++;
				carry = 0;
			}
		}
		Rev(str_out);
		cout << str_out << endl;
	}
	return 0;
}