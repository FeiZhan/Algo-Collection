//127 - "Accordian" Patience
//#define _FILE_IN_
//#define _FILE_OUT_
//#define _C_LAN_
#ifdef _FILE_IN_
#include <fstream>
#endif

#include <iostream>
#include <stdio.h>
#include <string>
#include <vector>
using namespace std;

int main()
{
#ifdef _FILE_IN_
	ifstream fin;
	fin.open("input.txt");
	cin.rdbuf(fin.rdbuf()); // assign file's streambuf to cin
#ifdef _C_LAN_
	freopen("input.txt", "r", stdin);
#endif
#endif
#ifdef _FILE_OUT_
	ofstream fout;
	fout.open("output.txt");
	cout.rdbuf(fout.rdbuf()); // assign file's streambuf to cout
#ifdef _C_LAN_
	freopen("output.txt", "w", stdout);
#endif
#endif

	bool can_move, is_first;
	int count, now;
	string str_in, str_tmp;
	vector<string> vec_str_tmp;
	vector<vector<string> > pile;
	while (cin >> str_in && str_in.compare("#") != 0)
	{
		pile.clear();
		vec_str_tmp.clear();
		vec_str_tmp.push_back(str_in);
		pile.push_back(vec_str_tmp);
		for (int i = 1; i < 52; i ++)
		{
			cin  >> str_in;
			vec_str_tmp.clear();
			vec_str_tmp.push_back(str_in);
			pile.push_back(vec_str_tmp);
		}
		now = 1;
		while (now < pile.size())
		{
			if (now - 3 >= 0
				&& ( pile[now - 3].at(0).at(0) == pile[now].at(0).at(0)
				|| pile[now - 3].at(0).at(1) == pile[now].at(0).at(1) ))
			{
				pile[now - 3].insert(pile[now - 3].begin(), pile[now].at(0));
				pile[now].erase(pile[now].begin());
				if (pile.at(now).size() == 0)
				{
					pile.erase(pile.begin() + now);
				}
				now -= 3;
			}
			else if (now - 1 >= 0
				&& ( pile[now - 1].at(0).at(0) == pile[now].at(0).at(0)
				|| pile[now - 1].at(0).at(1) == pile[now].at(0).at(1) ))
			{
				pile[now - 1].insert(pile[now - 1].begin(), pile[now].at(0));
				pile[now].erase(pile[now].begin());
				if (pile.at(now).size() == 0)
				{
					pile.erase(pile.begin() + now);
				}
				now -= 1;
			}
			else
				now ++;
		}
		cout << pile.size() << " pile";
		if (pile.size() > 1)
		{
			cout << "s";
		}
		cout << " remaining: ";
		is_first = true;
		for (int i = 0; i < pile.size(); i ++)
		{
			if (is_first == true)
			{
				is_first = false;
			}
			else
				cout << " ";
			cout << pile[i].size();
		}
		cout << endl;
	}

#ifdef _FILE_IN_
#ifndef _FILE_OUT_
	system("pause");
#endif
#endif
	return 0;
}