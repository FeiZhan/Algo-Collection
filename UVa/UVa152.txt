//152 - Tree's a Crowd
//#define _FILE_IN_
//#define _FILE_OUT_
//#define _C_LAN_
#ifdef _FILE_IN_
#include <fstream>
#endif

#include <iostream>
#include <stdio.h>
#include <vector>
#include <cmath>
using namespace std;

int main()
{
#ifdef _FILE_IN_
	ifstream fin;
	fin.open("input.txt");
	cin.rdbuf(fin.rdbuf()); // assign file's streambuf to cin
#ifdef _C_LAN_
	freopen("input.txt", "r", stdin);
#endif
#endif
#ifdef _FILE_OUT_
	ofstream fout;
	fout.open("output.txt");
	cout.rdbuf(fout.rdbuf()); // assign file's streambuf to cout
#ifdef _C_LAN_
	freopen("output.txt", "w", stdout);
#endif
#endif

	int num[3];
	double dist_min, dist;
	vector<int> num_vec[3], count;
	for (int i = 0; i < 3; i ++)
	{
		num_vec[i].clear();
	}
	while (cin >> num[0] >> num[1] >> num[2]
		&& !(num[0] == 0 && num[1] == 0 && num[2] == 0))
	{
		for (int i = 0; i < 3; i ++)
		{
			num_vec[i].push_back(num[i]);
		}
	}
	count.clear();
	for (int i = 0; i < 10; i ++)
	{
		count.push_back(0);
	}
	for (int i = 0; i < num_vec[0].size(); i ++)
	{
		dist_min = 500.0;
		for (int j = 0; j < num_vec[0].size(); j ++)
		{
			if (i != j)
			{
				dist = sqrt(double( (num_vec[0].at(i) - num_vec[0].at(j)) * (num_vec[0].at(i) - num_vec[0].at(j))
					+ (num_vec[1].at(i) - num_vec[1].at(j)) * (num_vec[1].at(i) - num_vec[1].at(j))
					+ (num_vec[2].at(i) - num_vec[2].at(j)) * (num_vec[2].at(i) - num_vec[2].at(j)) ));
				if (dist < dist_min)
				{
					dist_min = dist;
				}
			}
		}
		if (dist_min < 10)
		{
			count[int(dist_min)] ++;
		}
	}
	for (int i = 0; i < 10; i ++)
	{
		printf("%4d", count.at(i));
	}
	cout << endl;

#ifdef _FILE_IN_
#ifndef _FILE_OUT_
	system("pause");
#endif
#endif
	return 0;
}