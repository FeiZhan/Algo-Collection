//10191 - Longest Nap
#define _FILE_DEBUG_
#define _C_LAN_
//#define _DEBUG_OUTPUT_
#ifdef _FILE_DEBUG_
#include <fstream>
#endif
#include <iostream>
#include <stdio.h>
using namespace std;
#include <string>
#include<string.h>

int main(int argc, char *argv[])
{
#ifdef _FILE_DEBUG_
	ifstream fin;
	fin.open("../input.txt");
	cin.rdbuf(fin.rdbuf()); // assign file's streambuf to cin
#ifdef _C_LAN_
	freopen("../input.txt", "r", stdin);
#endif
#endif
#ifdef _FILE_DEBUG_
	ofstream fout;
	fout.open("../output.txt");
	cout.rdbuf(fout.rdbuf()); // assign file's streambuf to cout
#ifdef _C_LAN_
	freopen("../output.txt", "w", stdout);
#endif
#endif

	long long app_sum, nap, nap_max, day_cnt = 0;
	char begin[100][6], end[100][6], tmp[10000], max_str[6];
	while (scanf("%lld", &app_sum) != EOF)
	{
		strcpy(begin[0], "10:00");
		strcpy(end[0], "10:00");
		strcpy(begin[app_sum + 1], "18:00");
		strcpy(end[app_sum + 1], "18:00");
		nap_max = 0;
		for (long long i = 1; i <= app_sum; ++ i)
		{
			//cin >> begin >> end;
			scanf("%s%s", begin[i], end[i]);
			for (long long j = i - 1; j >= 0; -- j)
			{
				if (strcmp(begin[i], begin[j]) < 0)
				{
					strcpy(tmp, begin[i]);
					strcpy(begin[i], begin[j]);
					strcpy(begin[j], tmp);
					strcpy(tmp, end[i]);
					strcpy(end[i], end[j]);
					strcpy(end[j], tmp);
				}
			}
			gets(tmp);
		}
		for (long long i = 0; i <= app_sum; ++ i)
		{
			//printf("%s %s\n", begin[i], end[i]);
			nap = ((begin[i + 1][0]	- end[i][0]) * 10
				+ (begin[i + 1][1] - end[i][1])) * 60
				+ (begin[i + 1][3] - end[i][3]) * 10
				+ (begin[i + 1][4] - end[i][4]);
			if (nap > nap_max)
			{
				nap_max = nap;
				//max_str = last;
				strcpy(max_str, end[i]);
			}
		}
		++ day_cnt;
		cout << "Day #" << day_cnt << ": the longest nap starts at " << max_str
			<< " and will last for ";
		if (nap_max >= 60)
		{
			cout << nap_max / 60 << " hours and " << nap_max % 60;
		}
		else
		{
			cout << nap_max;
		}
		cout << " minutes." << endl;
	}

	return 0;
}