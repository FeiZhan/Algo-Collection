//532 - Dungeon Master
//#define _FILE_IN_
//#define _FILE_OUT_
//#define _C_LAN_
#ifdef _FILE_IN_
#include <fstream>
#endif

#include <iostream>
#include <stdio.h>
#include <memory.h>
using namespace std;

int queue[60000][3];
void check(char maze[31][31][31], int time[31][31][31], int size[3]
	, int &queue_head, int &queue_rear)
{
	int check_num[3], time_now;
	check_num[0] = queue[queue_head][0];
	check_num[1] = queue[queue_head][1];
	check_num[2] = queue[queue_head][2];
	time_now = time[check_num[0]][check_num[1]][check_num[2]] + 1;
	queue_head ++;
	if (check_num[0] - 1 >= 0 && maze[check_num[0] - 1][check_num[1]][check_num[2]] != '#'
		&& time[check_num[0] - 1][check_num[1]][check_num[2]] > time_now)
	{
		queue[queue_rear][0] = check_num[0] - 1;
		queue[queue_rear][1] = check_num[1];
		queue[queue_rear][2] = check_num[2];
		time[check_num[0] - 1][check_num[1]][check_num[2]] = time_now;
		queue_rear ++;
	}
	if (check_num[0] + 1 < size[0] && maze[check_num[0] + 1][check_num[1]][check_num[2]] != '#'
		&& time[check_num[0] + 1][check_num[1]][check_num[2]] > time_now)
	{
		queue[queue_rear][0] = check_num[0] + 1;
		queue[queue_rear][1] = check_num[1];
		queue[queue_rear][2] = check_num[2];
		time[check_num[0] + 1][check_num[1]][check_num[2]] = time_now;
		queue_rear ++;
	}
	if (check_num[1] - 1 >= 0 && maze[check_num[0]][check_num[1] - 1][check_num[2]] != '#'
		&& time[check_num[0]][check_num[1] - 1][check_num[2]] > time_now)
	{
		queue[queue_rear][0] = check_num[0];
		queue[queue_rear][1] = check_num[1] - 1;
		queue[queue_rear][2] = check_num[2];
		time[check_num[0]][check_num[1] - 1][check_num[2]] = time_now;
		queue_rear ++;
	}
	if (check_num[1] + 1 < size[1] && maze[check_num[0]][check_num[1] + 1][check_num[2]] != '#'
		&& time[check_num[0]][check_num[1] + 1][check_num[2]] > time_now)
	{
		queue[queue_rear][0] = check_num[0];
		queue[queue_rear][1] = check_num[1] + 1;
		queue[queue_rear][2] = check_num[2];
		time[check_num[0]][check_num[1] + 1][check_num[2]] = time_now;
		queue_rear ++;
	}
	if (check_num[2] - 1 >= 0 && maze[check_num[0]][check_num[1]][check_num[2] - 1] != '#'
		&& time[check_num[0]][check_num[1]][check_num[2] - 1] > time_now)
	{
		queue[queue_rear][0] = check_num[0];
		queue[queue_rear][1] = check_num[1];
		queue[queue_rear][2] = check_num[2] - 1;
		time[check_num[0]][check_num[1]][check_num[2] - 1] = time_now;
		queue_rear ++;
	}
	if (check_num[2] + 1 < size[2] && maze[check_num[0]][check_num[1]][check_num[2] + 1] != '#'
		&& time[check_num[0]][check_num[1]][check_num[2] + 1] > time_now)
	{
		queue[queue_rear][0] = check_num[0];
		queue[queue_rear][1] = check_num[1];
		queue[queue_rear][2] = check_num[2] + 1;
		time[check_num[0]][check_num[1]][check_num[2] + 1] = time_now;
		queue_rear ++;
	}
}
int main()
{
#ifdef _FILE_IN_
	ifstream fin;
	fin.open("input.txt");
	cin.rdbuf(fin.rdbuf()); // assign file's streambuf to cin
#ifdef _C_LAN_
	freopen("input.txt", "r", stdin);
#endif
#endif
#ifdef _FILE_OUT_
	ofstream fout;
	fout.open("output.txt");
	cout.rdbuf(fout.rdbuf()); // assign file's streambuf to cout
#ifdef _C_LAN_
	freopen("output.txt", "w", stdout);
#endif
#endif

	bool is_find;
	int size[3], time[31][31][31], queue_head, queue_rear, time_now;
	char maze[31][31][31];
	while (cin >> size[0] >> size[1] >> size[2]
		&& !(size[0] == 0 && size[1] == 0 && size[2] == 0))
	{
		queue_head = queue_rear = 0;
		memset(queue, 0x00, sizeof(queue));
		for (int i = 0; i < size[0]; i ++)
		{
			for (int j = 0; j < size[1]; j ++)
			{
				for (int k = 0; k < size[2]; k ++)
				{
					cin >> maze[i][j][k];
					time[i][j][k] = 30000;
					if (maze[i][j][k] == 'S')
					{
						queue[0][0] = i;
						queue[0][1] = j;
						queue[0][2] = k;
						time[i][j][k] = 0;
						queue_rear ++;
					}
				}
			}
		}
		while (queue_head < queue_rear)
		{
			check(maze, time, size, queue_head, queue_rear);
		}
		is_find = false;
		for (int i = 0; i < size[0]; i ++)
		{
			for (int j = 0; j < size[1]; j ++)
			{
				for (int k = 0; k < size[2]; k ++)
				{
					if (maze[i][j][k] == 'E')
					{
						if (time[i][j][k] >= 30000)
						{
							cout << "Trapped!" << endl;
						}
						else
							cout << "Escaped in " << time[i][j][k] << " minute(s)." << endl;
						is_find = true;
						break;
					}
				}
				if (is_find == true)
				{
					break;
				}
			}
			if (is_find == true)
			{
				break;
			}
		}
	}

#ifdef _FILE_IN_
#ifndef _FILE_OUT_
	system("pause");
#endif
#endif
	return 0;
}