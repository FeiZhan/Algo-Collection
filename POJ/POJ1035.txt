//1035 Spell checker
#define _FILE_DEBUG_
//#define _C_LAN_
//#define _DEBUG_OUTPUT_
#ifdef _FILE_DEBUG_
#include <fstream>
#endif
#include <iostream>
#include <stdio.h>
using namespace std;
#include <string>
#include <vector>

int main(int argc, char *argv[])
{
#ifdef _FILE_DEBUG_
	ifstream fin;
	fin.open("../input.txt");
	cin.rdbuf(fin.rdbuf()); // assign file's streambuf to cin
#ifdef _C_LAN_
	freopen("../input.txt", "r", stdin);
#endif
#endif
#ifdef _FILE_DEBUG_
	ofstream fout;
	fout.open("../output.txt");
	cout.rdbuf(fout.rdbuf()); // assign file's streambuf to cout
#ifdef _C_LAN_
	freopen("../output.txt", "w", stdout);
#endif
#endif

	bool ok_flag, done_flag;
	string word, tmp;
	vector<string> word_vec, del_vec, rep_vec, ins_vec;
	while (getline(cin, word) && word.compare("#") != 0)
	{
		word_vec.push_back(word);
	}
	while (getline(cin, word) && word.compare("#") != 0)
	{
		del_vec.clear();
		rep_vec.clear();
		ins_vec.clear();
		for (int i = 0; i < word_vec.size(); ++ i)
		{
			if (word == word_vec.at(i))
			{
				ok_flag = true;
				break;
			}
			else if (word.size() - word_vec.at(i).size() == 1)
			{
				done_flag = false;
				bool flag = true;
				for (int j = 0; j < word_vec.at(i).size(); ++ j)
				{
					if (done_flag == false
						&& word.at(j) != word_vec.at(i).at(j))
					{
						done_flag = true;
					}
					if (done_flag == true
						&& word.at(j + 1) != word_vec.at(i).at(j))
					{
						flag = false;
						break;
					}
				}
				if (flag == true)
				{
					rep_vec.push_back(word_vec.at(i));
				}
			}
			else if (word.size() == word_vec.at(i).size())
			{
				done_flag = false;
				bool flag = true;
				for (int j = 0; j < word_vec.at(i).size(); ++ j)
				{
					if (done_flag == false
						&& word.at(j) != word_vec.at(i).at(j))
					{
						done_flag = true;
						continue;
					}
					if (done_flag == true
						&& word.at(j) != word_vec.at(i).at(j))
					{
						flag = false;
						break;
					}
				}
				if (flag == true)
				{
					rep_vec.push_back(word_vec.at(i));
				}
			}
			else if (word.size() - word_vec.at(i).size() == -1)
			{
				done_flag = false;
				bool flag = true;
				for (int j = 0; j < word.size(); ++ j)
				{
					if (done_flag == false
						&& word.at(j) != word_vec.at(i).at(j))
					{
						done_flag = true;
					}
					if (done_flag == true
						&& word.at(j) != word_vec.at(i).at(j + 1))
					{
						flag = false;
						break;
					}
				}
				if (flag == true)
				{
					rep_vec.push_back(word_vec.at(i));
				}
			}
		}
		cout << word;
		if (ok_flag == true)
		{
			cout << " is correct";
		}
		else
		{
			cout << ":";
			for (int i = 0; i < rep_vec.size(); ++ i)
			{
				cout << " " << rep_vec.at(i);
			}
		}
		cout << endl;
	}

	return 0;
}